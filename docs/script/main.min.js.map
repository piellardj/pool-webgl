{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://pool-webgl/./src/ts/controls.ts","webpack://pool-webgl/./src/ts/gl-utils/fbo.ts","webpack://pool-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://pool-webgl/./src/ts/gl-utils/shader.ts","webpack://pool-webgl/./src/ts/gl-utils/utils.ts","webpack://pool-webgl/./src/ts/gl-utils/vbo.ts","webpack://pool-webgl/./src/ts/gl-utils/viewport.ts","webpack://pool-webgl/./src/ts/main.ts","webpack://pool-webgl/./src/ts/orbitalCamera.ts","webpack://pool-webgl/./src/ts/viewer/caustics-shaders.ts","webpack://pool-webgl/./src/ts/viewer/caustics.ts","webpack://pool-webgl/./src/ts/viewer/viewer.ts","webpack://pool-webgl/./src/ts/viewer/viewer2D-shaders.ts","webpack://pool-webgl/./src/ts/viewer/viewer2D.ts","webpack://pool-webgl/./src/ts/viewer/viewer3D-shaders.ts","webpack://pool-webgl/./src/ts/viewer/viewer3D.ts","webpack://pool-webgl/./src/ts/viewer/viewerCommon.ts","webpack://pool-webgl/./src/ts/water-shaders.ts","webpack://pool-webgl/./src/ts/water.ts","webpack://pool-webgl/webpack/bootstrap","webpack://pool-webgl/webpack/startup"],"sourcesContent":["import Water from \"./water\";\r\nimport Viewer2D from \"./viewer/viewer2D\";\r\nimport Viewer3D from \"./viewer/viewer3D\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction bindControls(water: Water, viewer2D: Viewer2D, viewer3D: Viewer3D): void {\r\n    {\r\n        const RESOLUTION_CONTROL_ID = \"quality\";\r\n        const setResolution = (resolution: string[]) => {\r\n            const size = +resolution[0];\r\n            water.reset(size, size);\r\n        }\r\n        Page.Tabs.addObserver(RESOLUTION_CONTROL_ID, setResolution);\r\n        setResolution(Page.Tabs.getValues(RESOLUTION_CONTROL_ID));\r\n    }\r\n    {\r\n        const RAIN_CONTROL_ID = \"rain-checkbox-id\";\r\n        const updateRain = (enable: boolean) => { water.rain = enable; };\r\n        Page.Checkbox.addObserver(RAIN_CONTROL_ID, updateRain);\r\n        updateRain(Page.Checkbox.isChecked(RAIN_CONTROL_ID));\r\n    }\r\n    {\r\n        const TENSION_CONTROL_ID = \"surface-tension-range-id\";\r\n        const updateTension = (tension: number) => { water.surfaceTension = tension; };\r\n        Page.Range.addObserver(TENSION_CONTROL_ID, updateTension);\r\n        updateTension(Page.Range.getValue(TENSION_CONTROL_ID));\r\n    }\r\n    {\r\n        const SPRING_CONTROL_ID = \"stiffness-range-id\";\r\n        const updateSpring = (stiffness: number) => { water.springStiffness = stiffness; };\r\n        Page.Range.addObserver(SPRING_CONTROL_ID, updateSpring);\r\n        updateSpring(Page.Range.getValue(SPRING_CONTROL_ID));\r\n    }\r\n    {\r\n        const DISPERSION_CONTROL_ID = \"dispersion-range-id\";\r\n        const updateDispersion = (dispersion: number) => { water.dispersion = dispersion; };\r\n        Page.Range.addObserver(DISPERSION_CONTROL_ID, updateDispersion);\r\n        updateDispersion(Page.Range.getValue(DISPERSION_CONTROL_ID));\r\n    }\r\n\r\n    {\r\n        const SPECULAR_CONTROL_ID = \"specular-checkbox-id\";\r\n        const updateSpecular = (enable: boolean) => {\r\n            viewer2D.specular = enable;\r\n            viewer3D.specular = enable;\r\n        };\r\n        Page.Checkbox.addObserver(SPECULAR_CONTROL_ID, updateSpecular);\r\n        updateSpecular(Page.Checkbox.isChecked(SPECULAR_CONTROL_ID));\r\n    }\r\n    {\r\n        const CAUSTICS_CONTROL_ID = \"caustics-checkbox-id\";\r\n        const updateCaustics = (enable: boolean) => {\r\n            viewer2D.caustics = enable;\r\n            viewer3D.caustics = enable;\r\n        };\r\n        Page.Checkbox.addObserver(CAUSTICS_CONTROL_ID, updateCaustics);\r\n        updateCaustics(Page.Checkbox.isChecked(CAUSTICS_CONTROL_ID));\r\n    }\r\n    {\r\n        const FRESNEL_CONTROL_ID = \"fresnel-checkbox-id\";\r\n        const updateSpecular = (enable: boolean) => {\r\n            viewer2D.fresnel = enable;\r\n            viewer3D.fresnel = enable;\r\n        };\r\n        Page.Checkbox.addObserver(FRESNEL_CONTROL_ID, updateSpecular);\r\n        updateSpecular(Page.Checkbox.isChecked(FRESNEL_CONTROL_ID));\r\n    }\r\n    {\r\n        const AMPLITUDE_CONTROL_ID = \"amplitude-range-id\";\r\n        const updateAmplitude = (amplitude: number) => {\r\n            viewer2D.amplitude = amplitude;\r\n            viewer3D.amplitude = amplitude;\r\n        };\r\n        Page.Range.addObserver(AMPLITUDE_CONTROL_ID, updateAmplitude);\r\n        updateAmplitude(Page.Range.getValue(AMPLITUDE_CONTROL_ID));\r\n    }\r\n    {\r\n        const LEVEL_CONTROL_ID = \"level-range-id\";\r\n        const updateWaterLevel = (level: number) => {\r\n            viewer2D.waterLevel = level;\r\n            viewer3D.waterLevel = level;\r\n        };\r\n        Page.Range.addObserver(LEVEL_CONTROL_ID, updateWaterLevel);\r\n        updateWaterLevel(Page.Range.getValue(LEVEL_CONTROL_ID));\r\n    }\r\n    {\r\n        const OPACITY_CONTROL_ID = \"opacity-range-id\";\r\n        const updateOpacity = (opacity: number) => {\r\n            viewer2D.opacity = opacity;\r\n            viewer3D.opacity = opacity;\r\n        };\r\n        Page.Range.addObserver(OPACITY_CONTROL_ID, updateOpacity);\r\n        updateOpacity(Page.Range.getValue(OPACITY_CONTROL_ID));\r\n    }\r\n    {\r\n        const ETA_CONTROL_ID = \"refraction-range-id\";\r\n        const updateEta = (eta: number) => {\r\n            viewer2D.eta = eta;\r\n            viewer3D.eta = eta;\r\n        };\r\n        Page.Range.addObserver(ETA_CONTROL_ID, updateEta);\r\n        updateEta(Page.Range.getValue(ETA_CONTROL_ID));\r\n    }\r\n}\r\n\r\nfunction bind(water: Water, viewer2D: Viewer2D, viewer3D: Viewer3D): void {\r\n    bindControls(water, viewer2D, viewer3D);\r\n}\r\n\r\nfunction bindRendererChooser(choose2D: () => void, choose3D: () => void) {\r\n    function bindViewer(viewerStr: string[]) {\r\n        if (viewerStr[0] === \"2D\") {\r\n            choose2D();\r\n        } else {\r\n            choose3D();\r\n        }\r\n    }\r\n    const VIEWER_CONTROL_ID = \"viewer\";\r\n    Page.Tabs.addObserver(VIEWER_CONTROL_ID, bindViewer);\r\n    bindViewer(Page.Tabs.getValues(VIEWER_CONTROL_ID));\r\n}\r\n\r\nexport { bind, bindRendererChooser };","import GLResource from \"./gl-resource\";\r\nimport Viewport from \"./viewport\";\r\n\r\nclass FBO extends GLResource {\r\n    id: WebGLFramebuffer;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, width: number, height: number) {\r\n        super(gl);\r\n        \r\n        this.id = gl.createFramebuffer();\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    public bind(colorBuffers: WebGLTexture[], depthBuffer: WebGLRenderbuffer = null): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.id);\r\n        gl.viewport(0, 0, this.width, this.height);\r\n      \r\n        for (let i = 0; i < colorBuffers.length; ++i) {\r\n          gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER, gl['COLOR_ATTACHMENT' + i], gl.TEXTURE_2D, colorBuffers[i], 0);\r\n        }\r\n        \r\n        if (depthBuffer) {\r\n          gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n          gl.framebufferRenderbuffer(\r\n            gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n        }\r\n    }\r\n\r\n    public static bindDefault(gl: WebGLRenderingContext, viewport: Viewport=null): void {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        if (viewport === null) {\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        } else {\r\n            gl.viewport(viewport.left, viewport.lower, viewport.width, viewport.height);\r\n        }\r\n\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteFramebuffer(this.id);\r\n        this.id = null;\r\n    }\r\n}\r\n\r\nexport default FBO;","abstract class GLResource {\r\n  private _gl: WebGLRenderingContext;\r\n\r\n  constructor(gl: WebGLRenderingContext) {\r\n    this._gl = gl;\r\n  }\r\n  \r\n  public gl(): WebGLRenderingContext {\r\n    return this._gl;\r\n  }\r\n  public abstract freeGLResources(): void;\r\n}\r\n\r\nexport default GLResource;","import GLResource from \"./gl-resource\";\r\nimport VBO from \"./vbo\";\r\n\r\nfunction notImplemented(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  if (Array.isArray(value)) {\r\n    gl.uniform1fv(location, value);\r\n  } else {\r\n    gl.uniform1f(location, value);\r\n  }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  if (Array.isArray(value)) {\r\n    gl.uniform1iv(location, value);\r\n  } else {\r\n    gl.uniform1iv(location, value);\r\n  }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n  gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture): void {\r\n  gl.uniform1i(location, unitNb);\r\n  gl.activeTexture(gl['TEXTURE' + unitNb]);\r\n  gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture): void {\r\n  gl.uniform1i(location, unitNb);\r\n  gl.activeTexture(gl['TEXTURE' + unitNb]);\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\ninterface Type {\r\n  str: string;\r\n  binder;//: (gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any) => void;// |\r\n  //((gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture) => void);\r\n};\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\nconst types = {\r\n  0x8B50: { str: 'FLOAT_VEC2', binder: bindUniformFloat2v },\r\n  0x8B51: { str: 'FLOAT_VEC3', binder: bindUniformFloat3v },\r\n  0x8B52: { str: 'FLOAT_VEC4', binder: bindUniformFloat4v },\r\n  0x8B53: { str: 'INT_VEC2', binder: bindUniformInt2v },\r\n  0x8B54: { str: 'INT_VEC3', binder: bindUniformInt3v },\r\n  0x8B55: { str: 'INT_VEC4', binder: bindUniformInt4v },\r\n  0x8B56: { str: 'BOOL', binder: bindUniformBool },\r\n  0x8B57: { str: 'BOOL_VEC2', binder: bindUniformBool2v },\r\n  0x8B58: { str: 'BOOL_VEC3', binder: bindUniformBool3v },\r\n  0x8B59: { str: 'BOOL_VEC4', binder: bindUniformBool4v },\r\n  0x8B5A: { str: 'FLOAT_MAT2', binder: bindUniformFloatMat2 },\r\n  0x8B5B: { str: 'FLOAT_MAT3', binder: bindUniformFloatMat3 },\r\n  0x8B5C: { str: 'FLOAT_MAT4', binder: bindUniformFloatMat4 },\r\n  0x8B5E: { str: 'SAMPLER_2D', binder: bindSampler2D },\r\n  0x8B60: { str: 'SAMPLER_CUBE', binder: bindSamplerCube },\r\n  0x1400: { str: 'BYTE', binder: notImplemented },\r\n  0x1401: { str: 'UNSIGNED_BYTE', binder: notImplemented },\r\n  0x1402: { str: 'SHORT', binder: notImplemented },\r\n  0x1403: { str: 'UNSIGNED_SHORT', binder: notImplemented },\r\n  0x1404: { str: 'INT', binder: bindUniformInt },\r\n  0x1405: { str: 'UNSIGNED_INT', binder: notImplemented },\r\n  0x1406: { str: 'FLOAT', binder: bindUniformFloat }\r\n};\r\n\r\ninterface ShaderUniform {\r\n  value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n  loc: WebGLUniformLocation;\r\n  size: number;\r\n  type: number;\r\n}\r\n\r\ninterface ShaderAttribute {\r\n  VBO: VBO;\r\n  loc: GLint;\r\n  size: number;\r\n  type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n  id: WebGLProgram;\r\n  uCount: number;\r\n  u: ShaderUniform[];\r\n\r\n  aCount: number;\r\n  a: ShaderAttribute[];\r\n\r\n  constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n    function createShader(type: GLenum, source: string): WebGLShader {\r\n      const shader = gl.createShader(type);\r\n      gl.shaderSource(shader, source);\r\n      gl.compileShader(shader);\r\n\r\n      const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n      if (!success) {\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n      }\r\n\r\n      return shader;\r\n    }\r\n\r\n    super(gl);\r\n\r\n    this.id = null;\r\n    this.uCount = 0;\r\n    this.aCount = 0;\r\n\r\n    const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n    const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n    const id = gl.createProgram();\r\n    gl.attachShader(id, vertexShader);\r\n    gl.attachShader(id, fragmentShader);\r\n    gl.linkProgram(id);\r\n\r\n    const success = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n    if (!success) {\r\n      console.log(gl.getProgramInfoLog(id));\r\n      gl.deleteProgram(id);\r\n    } else {\r\n      this.id = id;\r\n\r\n      this.introspection();\r\n    }\r\n  }\r\n\r\n  public freeGLResources(): void {\r\n    super.gl().deleteProgram(this.id);\r\n    this.id = null;\r\n  }\r\n\r\n  private introspection(): void {\r\n    const gl = super.gl();\r\n\r\n    this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n    this.u = [];\r\n    for (let i = 0; i < this.uCount; ++i) {\r\n      const uniform = gl.getActiveUniform(this.id, i);\r\n      const name = uniform.name;\r\n\r\n      this.u[name] = {\r\n        value: null,\r\n        loc: gl.getUniformLocation(this.id, name),\r\n        size: uniform.size,\r\n        type: uniform.type,\r\n      };\r\n    }\r\n\r\n    this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n    this.a = [];\r\n    for (let i = 0; i < this.aCount; ++i) {\r\n      const attribute = gl.getActiveAttrib(this.id, i);\r\n      const name = attribute.name;\r\n\r\n      this.a[name] = {\r\n        VBO: null,\r\n        loc: gl.getAttribLocation(this.id, name),\r\n        size: attribute.size,\r\n        type: attribute.type,\r\n      };\r\n    }\r\n  }\r\n\r\n  public use(): void {\r\n    super.gl().useProgram(this.id);\r\n  }\r\n\r\n  public bindUniforms(): void {\r\n    const gl: WebGLRenderingContext = super.gl();\r\n    let currTextureUnitNb: number = 0;\r\n\r\n    for (let uName in this.u) {\r\n      const uniform = this.u[uName];\r\n      if (uniform.value !== null) {\r\n        if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n          const unitNb: number = currTextureUnitNb;\r\n          types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n          currTextureUnitNb++;\r\n        } else {\r\n          types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public bindAttributes(): void {\r\n    for (let aName in this.a) {\r\n      const attribute = this.a[aName];\r\n      if (attribute.VBO !== null) {\r\n        attribute.VBO.bind(attribute.loc);\r\n      }\r\n    }\r\n  }\r\n\r\n  public bindUniformsAndAttributes(): void {\r\n    this.bindUniforms();\r\n    this.bindAttributes();\r\n  }\r\n}\r\n\r\nexport default ShaderProgram;","function resizeCanvas(gl: WebGLRenderingContext, hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width != width || canvas.height != height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport { resizeCanvas };","import GLResource from \"./gl-resource\";\r\n\r\nclass VBO extends GLResource {\r\n  private id: WebGLBuffer;\r\n  private size: number;\r\n  private type: GLenum;\r\n  private normalize: GLboolean;\r\n  private stride: GLsizei;\r\n  private offset: GLintptr;\r\n\r\n  constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum) {\r\n    super(gl);\r\n\r\n    this.id = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n    gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n    this.size = size;\r\n    this.type = type;\r\n    this.normalize = false;\r\n    this.stride = 0;\r\n    this.offset = 0;\r\n  }\r\n\r\n  public freeGLResources(): void {\r\n    this.gl().deleteBuffer(this.id);\r\n    this.id = null;\r\n  }\r\n\r\n  public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n    let vert = [\r\n      minX, minY,\r\n      maxX, minY,\r\n      minX, maxY,\r\n      maxX, maxY,\r\n    ];\r\n\r\n    return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT);\r\n  }\r\n\r\n  public bind(location: GLuint): void {\r\n    const gl = super.gl();\r\n\r\n    gl.enableVertexAttribArray(location);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n    gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n  }\r\n};\r\n\r\nexport default VBO;","class Viewport {\r\n    public lower: number;\r\n    public left: number;\r\n    public width: number;\r\n    public height: number;\r\n}\r\n\r\nexport default Viewport;","import * as Utils from \"./gl-utils/utils\";\r\nimport FBO from \"./gl-utils/fbo\";\r\nimport Water from \"./water\";\r\nimport Viewer from \"./viewer/viewer\";\r\nimport Viewer2D from \"./viewer/viewer2D\";\r\nimport Viewer3D from \"./viewer/viewer3D\";\r\nimport ViewerCommon from \"./viewer/viewerCommon\";\r\nimport * as Controls from \"./controls\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(canvas: HTMLCanvasElement, flags: any): WebGLRenderingContext {\r\n    function setError(message: string) {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    let gl: WebGLRenderingContext = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (!gl) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (!gl) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return null;\r\n        }\r\n        setError(\"Your browser or device only supports experimental WebGL.\\n\" +\r\n            \"The simulation may not run as expected.\");\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 0);\r\n\r\n    Utils.resizeCanvas(gl, false);\r\n\r\n    return gl;\r\n}\r\n\r\nfunction main() {\r\n    const canvas: HTMLCanvasElement = Page.Canvas.getCanvas();\r\n    const gl: WebGLRenderingContext = initGL(canvas, {});\r\n    if (!gl)\r\n        return;\r\n\r\n    const toggleFullscreen = (fullscreen: boolean) => {\r\n        Page.Canvas.getCanvasContainer().style.background = fullscreen ? \"#BCBCC6\" : \"none\";\r\n    };\r\n    Page.Canvas.Observers.fullscreenToggle.push(toggleFullscreen);\r\n    toggleFullscreen(Page.Canvas.isFullScreen());\r\n\r\n    const side = 512;\r\n    const water: Water = new Water(gl, side, side);\r\n    const viewerCommon: ViewerCommon = new ViewerCommon(gl, 512, \"rc/tile.png\");\r\n    const viewer2D: Viewer2D = new Viewer2D(gl, viewerCommon);\r\n    const viewer3D: Viewer3D = new Viewer3D(gl, viewerCommon);\r\n\r\n    Controls.bind(water, viewer2D, viewer3D);\r\n\r\n    let viewer: Viewer = viewer3D;\r\n    Controls.bindRendererChooser(\r\n        () => { viewer = viewer2D; },\r\n        () => { viewer = viewer3D; });\r\n\r\n    /* Update the FPS indicator every second. */\r\n    let instantFPS: number = 0;\r\n    const updateFpsText = function () {\r\n        Page.Canvas.setIndicatorText(\"fps\", instantFPS.toFixed(0));\r\n    };\r\n    setInterval(updateFpsText, 1000);\r\n\r\n    const MAX_FPS = 60;\r\n    const MIN_TIMESTEP = 1 / MAX_FPS;\r\n    let lastUpdateTime = 0;\r\n    let lastFrameTime = 0;\r\n    function mainLoop(time) {\r\n        time *= 0.001; //dt is now in seconds\r\n        instantFPS = 1 / (time - lastFrameTime);\r\n        lastFrameTime = time;\r\n\r\n        if (time - lastUpdateTime > MIN_TIMESTEP) { // don't update too often or the sim will look fast-forwarded\r\n            lastUpdateTime = time;\r\n\r\n            /* Updating */\r\n            viewer.interact(water);\r\n            water.update(1 / 60); // fixed timestep, independant from FPS to avoid float precision issues\r\n        }\r\n\r\n        Utils.resizeCanvas(gl, false);\r\n\r\n        /* Drawing */\r\n        if (viewer.caustics) {\r\n            viewerCommon.caustics.compute(water, viewer.amplitude, viewer.waterLevel, viewer.eta);\r\n        }\r\n\r\n        FBO.bindDefault(gl);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        viewer.display(water, viewerCommon);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","declare const mat4: any;\r\n\r\nclass OrbitalCamera {\r\n    private _focus: number[];\r\n    private _distance: number;\r\n    private _theta: number;\r\n    private _phi: number;\r\n\r\n    private _eyePos: number[];\r\n    private _viewMatrix: number[];\r\n\r\n    constructor(focusPoint: number[], distance: number) {\r\n        this._focus = focusPoint;\r\n        this._distance = distance;\r\n        this._theta = 0;\r\n        this._phi = 0.01;\r\n\r\n        this._eyePos = [0, 0, 0];\r\n        this._viewMatrix = mat4.create();\r\n        this.recompute();\r\n    }\r\n\r\n    public get focusPoint(): number[] {\r\n        return this._focus;\r\n    }\r\n\r\n    public get distance(): number {\r\n        return this._distance;\r\n    }\r\n\r\n    public get theta(): number {\r\n        return this._theta;\r\n    }\r\n\r\n    public get phi(): number {\r\n        return this._phi;\r\n    }\r\n\r\n    public set focusPoint(newFocus: number[]) {\r\n        this._focus = newFocus;\r\n        this.recompute();\r\n    }\r\n\r\n    public set distance(newDistance: number) {\r\n        this._distance = newDistance;\r\n        this.recompute();\r\n    }\r\n\r\n    public set theta(newTheta: number) {\r\n        this._theta = newTheta;\r\n        this.recompute();\r\n    }\r\n\r\n    public set phi(newPhi: number) {\r\n        this._phi = newPhi;\r\n        this.recompute();\r\n    }\r\n\r\n    public get eyePos(): number[] {\r\n        return this._eyePos;\r\n    }\r\n\r\n    public get viewMatrix(): number[] {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    private recompute(): void {\r\n        const sin = Math.sin;\r\n        const cos = Math.cos;\r\n\r\n        this._eyePos[0] = this.focusPoint[0] + this.distance * (sin(this.phi) * cos(this.theta));\r\n        this._eyePos[1] = this.focusPoint[1] + this.distance * (sin(this.phi) * sin(this.theta));\r\n        this._eyePos[2] = this.focusPoint[2] + this.distance * (cos(this.phi));\r\n\r\n        this._viewMatrix = mat4.lookAt(this._viewMatrix, this.eyePos, this.focusPoint, [0, 0, 1]);\r\n    }\r\n}\r\n\r\nexport default OrbitalCamera;","import Shader from \"../gl-utils/shader\";\r\nimport VBO from \"../gl-utils/vbo\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst causticsVert: string =\r\n    `attribute vec2 aVert;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\n\r\nuniform float uAmplitude;\r\nuniform float uWaterLevel;\r\nuniform float uEta;\r\n\r\nvarying vec2 sourceCoords;\r\nvarying vec2 refractedCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    float height = decodeHeight(texture2D(uWater, aVert));\r\n    height = uWaterLevel + 0.5 * uAmplitude * height;\r\n    vec3 normal = decodeNormal(texture2D(uNormals, aVert), uAmplitude);\r\n\r\n    const vec3 fromLight = vec3(0, 0, -1);\r\n    vec3 refracted = refract(fromLight, normal, uEta);\r\n    vec3 toGround = height * refracted / refracted.z;\r\n\r\n    vec2 groundCoords = aVert + toGround.xy;\r\n\r\n    sourceCoords = aVert;\r\n    refractedCoords = groundCoords;\r\n\r\n    gl_Position = vec4(2.0*groundCoords - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst causticsFrag: string =\r\n    `#extension GL_OES_standard_derivatives : enable\r\nprecision mediump float;\r\n\r\nvarying vec2 sourceCoords;\r\nvarying vec2 refractedCoords;\r\n\r\nvoid main(void)\r\n{\r\n    float sourceArea = length(dFdx(sourceCoords)) * length(dFdy(sourceCoords));\r\n    float refractedArea = length(dFdx(refractedCoords)) * length(dFdy(refractedCoords));\r\n\r\n    float variation = sourceArea / refractedArea;\r\n\r\n    gl_FragColor = 0.5 + .9 * vec4(variation - 1.0);\r\n}`;\r\n\r\nfunction buildCausticsShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = causticsVert.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);;\r\n    const fragSrc = causticsFrag;\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nexport {\r\n    buildCausticsShader,\r\n};","import GLResource from \"../gl-utils/gl-resource\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport Water from \"../water\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport * as ShadersBuilder from \"./caustics-shaders\";\r\n\r\nclass Caustics extends GLResource {\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    private _supported: boolean;\r\n\r\n    private _gridWidth: number;\r\n    private _gridHeight: number;\r\n\r\n    private _shader: Shader;\r\n\r\n    private _texture: WebGLTexture;\r\n    private _fbo: FBO;\r\n\r\n    private _vertices: WebGLBuffer;\r\n    private _indices: WebGLBuffer;\r\n\r\n    constructor(gl: WebGLRenderingContext, w: number, h: number) {\r\n        super(gl);\r\n\r\n        this._supported = gl.getExtension('OES_standard_derivatives') !== null;\r\n\r\n        const n = 128;\r\n        this._gridWidth = n;\r\n        this._gridHeight = n;\r\n\r\n        this.reset(w, h);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        if (this._shader) {\r\n            this._shader.freeGLResources();\r\n        }\r\n        if (this._texture) {\r\n            gl.deleteTexture(this._texture);\r\n        }\r\n        if (this._fbo) {\r\n            this._fbo.freeGLResources();\r\n        }\r\n\r\n        if (this._vertices) {\r\n            gl.deleteBuffer(this._vertices);\r\n        }\r\n        if (this._indices) {\r\n            gl.deleteBuffer(this._indices);\r\n        }\r\n    }\r\n\r\n    public compute(water: Water, amplitude: number, waterLevel: number, eta: number): void {\r\n        if (!this.supported)\r\n            return;\r\n\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._shader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n        shader.u[\"uNormals\"].value = water.normalmap;\r\n        shader.u[\"uAmplitude\"].value = 0.1 * amplitude;\r\n        shader.u[\"uWaterLevel\"].value = waterLevel;\r\n        shader.u[\"uEta\"].value = eta;\r\n\r\n        this._fbo.bind([this._texture]);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        shader.use();\r\n        shader.bindUniforms();//AndAttributes();\r\n\r\n        gl.enableVertexAttribArray(0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertices);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indices);\r\n\r\n        const nbTriangles = 2 * (this._gridWidth - 1) * (this._gridHeight - 1);\r\n        gl.drawElements(gl.TRIANGLES, 3 * nbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.disableVertexAttribArray(0);\r\n    }\r\n\r\n    public reset(w: number, h: number): void {\r\n        if (!this.supported)\r\n            return;\r\n\r\n        this.freeGLResources();\r\n\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._width = w;\r\n        this._height = h;\r\n\r\n        this._shader = ShadersBuilder.buildCausticsShader(gl);\r\n\r\n        this._fbo = new FBO(gl, w, h);\r\n\r\n        /* Texture initialization */\r\n        const data: number[] = new Array(3 * w * h);\r\n        for (let i = 0; i < data.length;  ++i) {\r\n            data[i] = 127;\r\n        }\r\n        const uintData = new Uint8Array(data);\r\n\r\n        const wrap = gl.CLAMP_TO_EDGE;\r\n        const filter = gl.LINEAR;\r\n        this._texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, w, h, 0,\r\n            gl.RGB, gl.UNSIGNED_BYTE, uintData);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n\r\n        /* Grid vertices */\r\n        {\r\n            const nX = this._gridWidth;\r\n            const nY = this._gridHeight;\r\n            {\r\n                const vert = [];\r\n                for (let iY = 0; iY < nY; ++iY) {\r\n                    for (let iX = 0; iX < nX; ++iX) {\r\n                        vert.push(iX / (nX - 1));\r\n                        vert.push(iY / (nY - 1));\r\n                    }\r\n                }\r\n                const array = new Float32Array(vert);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n                this._vertices = id;\r\n            }\r\n            {\r\n                const indices = [];\r\n                for (let iY = 0; iY < nY - 1; ++iY) {\r\n                    for (let iX = 0; iX < nX - 1; ++iX) {\r\n                        indices.push(iY * nX + iX);\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n                    }\r\n                }\r\n\r\n                const array = new Uint16Array(indices);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n                this._indices = id;\r\n            }\r\n        }\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    get texture(): WebGLTexture {\r\n        return this._texture;\r\n    }\r\n\r\n    get supported(): boolean {\r\n        return this._supported;\r\n    }\r\n}\r\n\r\nexport default Caustics;","import GLResource from \"../gl-utils/gl-resource\";\r\nimport Water from \"../water\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\n\r\nabstract class Viewer extends GLResource {\r\n    private _showSpecular: boolean;\r\n    private _showCaustics: boolean;\r\n    private _useFresnel: boolean;\r\n    private _amplitude: number;\r\n    private _waterLevel: number;\r\n    private _opacity: number;\r\n    private _eta: number;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        super(gl);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n    }\r\n\r\n    public abstract display(water: Water, common: ViewerCommon): void;\r\n\r\n    public abstract interact(water: Water): void;\r\n\r\n    protected abstract updateSpecular(): void;\r\n    protected abstract updateCaustics(): void;\r\n    protected abstract updateFresnel(): void;\r\n    protected abstract updateAmplitude(): void;\r\n    protected abstract updateWaterLevel(): void;\r\n    protected abstract updateOpacity(): void;\r\n    protected abstract updateEta(): void;\r\n\r\n    set specular(b: boolean) {\r\n        this._showSpecular = b;\r\n        this.updateSpecular();\r\n    }\r\n    get specular(): boolean {\r\n        return this._showSpecular;\r\n    }\r\n\r\n    set caustics(b: boolean) {\r\n        this._showCaustics = b;\r\n        this.updateCaustics();\r\n    }\r\n    get caustics(): boolean {\r\n        return this._showCaustics;\r\n    }\r\n\r\n    set fresnel(b: boolean) {\r\n        this._useFresnel = b;\r\n        this.updateFresnel();\r\n    }\r\n    get fresnel(): boolean {\r\n        return this._useFresnel;\r\n    }\r\n\r\n    set amplitude(a: number) {\r\n        this._amplitude = a;\r\n        this.updateAmplitude();\r\n    }\r\n    get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    set waterLevel(d: number) {\r\n        this._waterLevel = d;\r\n        this.updateWaterLevel();\r\n    }\r\n    get waterLevel(): number {\r\n        return this._waterLevel;\r\n    }\r\n\r\n    set opacity(o: number) {\r\n        this._opacity = o;\r\n        this.updateOpacity();\r\n    }\r\n    get opacity(): number {\r\n        return this._opacity;\r\n    }\r\n\r\n    set eta(e: number) {\r\n        this._eta = e;\r\n        this.updateEta();\r\n    }\r\n    get eta(): number {\r\n        return this._eta;\r\n    }\r\n}\r\n\r\nexport default Viewer;","import Shader from \"../gl-utils/shader\";\r\nimport VBO from \"../gl-utils/vbo\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst fullscreenVert: string =\r\n    `attribute vec2 aCorner; //{0,1}x{0,1}\r\n\r\nvarying vec2 sampleCoords;\r\n\r\nvoid main(void) {\r\n    sampleCoords = aCorner;\r\n    gl_Position = vec4(2.0*aCorner - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst displayFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\nuniform sampler2D uCaustics;\r\nuniform sampler2D uTileTexture;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\nuniform float uEta;\r\nuniform float uOpacity;\r\nuniform bool uShowSpecular;\r\nuniform bool uShowCaustics;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nconst vec3 WATER_COLOR = vec3(0.0, 0.2, 0.5);\r\nconst vec3 SPECULAR_COLOR = vec3(1);\r\nconst float TILE_REPETITION = 4.0;\r\n\r\nvoid main(void)\r\n{\r\n    float height = decodeHeight(texture2D(uWater, sampleCoords));\r\n    height = uWaterLevel + 0.5 * uAmplitude * height;\r\n    vec3 normal = decodeNormal(texture2D(uNormals, sampleCoords), uAmplitude);\r\n\r\n    vec3 position = vec3(sampleCoords, height);\r\n\r\n    const vec3 fromEye = vec3(0, 0, -1);\r\n    vec3 refracted = refract(fromEye, normal, uEta);\r\n    refracted *= height / refracted.z;\r\n    vec2 coordsOnFloor = sampleCoords + refracted.xy;\r\n\r\n    vec3 tileColor = texture2D(uTileTexture, TILE_REPETITION * coordsOnFloor).rgb;\r\n    float caustics = texture2D(uCaustics, coordsOnFloor).r;\r\n    caustics = mix(0.5, caustics, float(uShowCaustics));\r\n    vec3 floorColor = tileColor * (0.5 + caustics);\r\n\r\n    float opacity = clamp(uOpacity * length(refracted), 0.0, 1.0);\r\n    vec3 color = mix(floorColor, WATER_COLOR, opacity);\r\n\r\n    // const vec3 fromLight = normalize(vec3(.05, -.1, -.8));\r\n    const vec3 fromLight = vec3(-.061898, -.123797, -.990405); // precomputed for IE11\r\n    vec3 reflected = reflect(fromLight, normal);\r\n    float specular = max(0.0, dot(reflected, -fromEye));\r\n    specular = pow(specular, 1000.0) * float(uShowSpecular);\r\n\r\n    gl_FragColor = vec4(color + specular, 1);\r\n}`;\r\n\r\nfunction buildDisplayShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = displayFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nexport {\r\n    buildDisplayShader,\r\n};","import Viewer from \"./viewer\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\nimport Water from \"../water\";\r\nimport Caustics from \"./caustics\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport Viewport from \"../gl-utils/viewport\";\r\nimport * as ShadersBuilder from \"./viewer2D-shaders\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass Viewer2D extends Viewer {\r\n    private _displayShader: Shader;\r\n    private _viewport: Viewport;\r\n\r\n    constructor(gl: WebGLRenderingContext, common: ViewerCommon) {\r\n        super(gl);\r\n        \r\n        this._displayShader = ShadersBuilder.buildDisplayShader(gl);\r\n        this._displayShader.u[\"uTileTexture\"].value = common.tileTexture;\r\n        this._displayShader.u[\"uCaustics\"].value = common.caustics.texture;\r\n\r\n        this._viewport = new Viewport;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this._displayShader.freeGLResources();\r\n    }\r\n\r\n    private updateViewport(): void {\r\n        const gl = super.gl();\r\n        const side = Math.min(gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        \r\n        this._viewport.left = 0.5 * (gl.drawingBufferWidth - side);\r\n        this._viewport.lower = 0.5 * (gl.drawingBufferHeight - side);\r\n        this._viewport.width = side;\r\n        this._viewport.height = side;\r\n    }\r\n\r\n    public display(water: Water, common: ViewerCommon): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this.updateViewport();\r\n\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.disable(gl.DEPTH_TEST);\r\n\r\n        const displayShader = this._displayShader;\r\n\r\n        FBO.bindDefault(gl, this._viewport);\r\n\r\n        displayShader.u[\"uWater\"].value = water.heightmap;\r\n        displayShader.u[\"uNormals\"].value = water.normalmap;\r\n\r\n        displayShader.use();\r\n        displayShader.bindUniformsAndAttributes();\r\n\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n\r\n    public interact(water: Water): void {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const canvasSize = Page.Canvas.getSize();\r\n            const p = Page.Canvas.getMousePosition(); // normalized\r\n            p[0] *= canvasSize[0]; //in pixels\r\n            p[1] = (1 - p[1]) * canvasSize[1]; //in pixels\r\n\r\n            this.updateViewport();\r\n            p[0] = (p[0] - this._viewport.left) / this._viewport.width;\r\n            p[1] = (p[1] - this._viewport.lower) / this._viewport.height;\r\n\r\n            water.touch(p[0] * water.width, p[1] * water.height, 8);\r\n        }\r\n    }\r\n\r\n    protected updateSpecular(): void {\r\n        this._displayShader.u[\"uShowSpecular\"].value = this.specular;\r\n    }\r\n\r\n    protected updateCaustics(): void {\r\n        this._displayShader.u[\"uShowCaustics\"].value = this.caustics;\r\n    }\r\n\r\n    protected updateFresnel(): void {\r\n    }\r\n\r\n    protected updateAmplitude(): void {\r\n        this._displayShader.u[\"uAmplitude\"].value = this.amplitude;\r\n    }\r\n\r\n    protected updateWaterLevel(): void {\r\n        this._displayShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n    }\r\n\r\n    protected updateOpacity(): void {\r\n        this._displayShader.u[\"uOpacity\"].value = this.opacity;\r\n    }\r\n    \r\n    protected updateEta(): void {\r\n        this._displayShader.u[\"uEta\"].value = this.eta;\r\n    }\r\n}\r\n\r\nexport default Viewer2D;","import Shader from \"../gl-utils/shader\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst waterCommonStr: string =\r\n    `\r\nuniform sampler2D uCaustics;\r\nuniform sampler2D uTileTexture;\r\n\r\nuniform vec3 uLightDir; //normalized\r\n\r\nuniform float uF0;\r\nuniform float uEta;\r\nuniform float uOpacity;\r\nuniform bool uSpecular;\r\nuniform bool uShowCaustics;\r\nuniform bool uFresnel;\r\n\r\nconst vec3 WATER_COLOR = vec3(0.0, 0.2, 0.5);\r\nconst vec3 SPECULAR_COLOR = vec3(1);\r\nconst float TILE_REPETITION = 4.0;\r\n\r\n/* Fresnel factor describes the proportion of refracted and reflected.\r\n* Arguments expected to be normalized. */\r\nfloat getFresnelFactor(const vec3 normal, const vec3 fromEye)\r\n{\r\n    float computed = mix(pow(1.0 - dot(normal,-fromEye), 5.0), 1.0, uF0);\r\n    return min(float(uFresnel), computed);\r\n}\r\n\r\nvec3 getTileColor(const vec2 coords)\r\n{\r\n    return texture2D(uTileTexture, TILE_REPETITION * coords).rgb;\r\n}\r\n\r\nfloat getCaustics(const vec2 coords)\r\n{\r\n    return mix(0.5, texture2D(uCaustics, coords).r, float(uShowCaustics));\r\n}\r\n\r\nvec3 getFloorColor(const vec2 coords)\r\n{\r\n    if (any(lessThan(coords, vec2(0))) || any(greaterThan(coords, vec2(1)))) {\r\n        return vec3(0);\r\n    }\r\n\r\n    return getTileColor(coords) * (0.5 + getCaustics(coords));\r\n}\r\n\r\n/* Floor color mixed with opacity.\r\n* 'refracted' expected to be normalized. */\r\nvec3 getRefractedColor(const vec3 entryPoint, vec3 refracted)\r\n{\r\n    if (refracted.z >= 0.0) {\r\n        return WATER_COLOR;\r\n    }\r\n\r\n    refracted *= -entryPoint.z / refracted.z;\r\n\r\n    vec2 groundCoords = entryPoint.xy + refracted.xy;\r\n    vec3 floorColor = getFloorColor(groundCoords + .5);\r\n\r\n    /*float f = 1.0;\r\n\r\n    if (groundCoords.x < -.5) {\r\n        f = min(f, abs((-.5 - entryPoint.x) / (groundCoords.x - entryPoint.x)));\r\n    }\r\n    if (groundCoords.x > .5) {\r\n        f = min(f, abs((.5 - entryPoint.x) / (groundCoords.x - entryPoint.x)));\r\n    }\r\n    if (groundCoords.y < -.5) {\r\n        f = min(f, abs((-.5 - entryPoint.y) / (groundCoords.y - entryPoint.y)));\r\n    }\r\n    if (groundCoords.y > .5) {\r\n        f = min(f, abs((.5 - entryPoint.y) / (groundCoords.y - entryPoint.y)));\r\n    }\r\n\r\n    refracted *= f;*/\r\n\r\n    float opacity = uOpacity * entryPoint.z;//length(refracted);\r\n    opacity = clamp(opacity, 0.0, 1.0);\r\n\r\n    return mix(floorColor, WATER_COLOR, opacity);\r\n}\r\n\r\nvec3 getReflectedColor(const vec3 dir)\r\n{\r\n    return vec3(0.5, 0.5, 0.8);\r\n}\r\n\r\nvec4 getSpecular(const vec3 reflected)\r\n{\r\n    float f = max(0.0, dot(-uLightDir, reflected));\r\n    f = pow(f, 200.0);\r\n    f *= float(uSpecular);\r\n\r\n    return vec4(SPECULAR_COLOR, f);\r\n}\r\n\r\nvec3 computeColor(const vec3 pos, const vec3 fromEye, const vec3 normal)\r\n{\r\n    vec3 refracted = refract(fromEye, normal, uEta);\r\n    vec3 reflected = reflect(fromEye, normal);\r\n\r\n    vec3 refractedColor = getRefractedColor(pos, refracted);\r\n    vec3 reflectedColor = getReflectedColor(reflected);\r\n\r\n    float fresnelFactor = getFresnelFactor(fromEye, normal);\r\n\r\n    vec3 surfaceColor = mix(refractedColor, reflectedColor, fresnelFactor);\r\n    vec4 specularColor = getSpecular(reflected);\r\n\r\n    return mix(surfaceColor, specularColor.rgb, specularColor.a);\r\n}`;\r\n\r\nconst sidesVert: string =\r\n    `attribute vec3 aPosition; //in {-.5, +.5} x {-.5, +.5} x {+0, +1}\r\nattribute vec2 aNormal; //normalized in {-1, +1} x {-1, +1}\r\n\r\nuniform mat4 uMVPMatrix;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec2 vNormal;\r\nvarying float relativeHeight; //relative to amplitude, in [-1, +1]\r\n\r\nvoid main(void) {\r\n    float dH = uAmplitude / 2.0;\r\n\r\n    vPosition = aPosition;\r\n    vPosition.z *= uWaterLevel + dH;\r\n\r\n    vNormal = aNormal;\r\n\r\n    relativeHeight = (vPosition.z - uWaterLevel) / dH;\r\n    \r\n    gl_Position = uMVPMatrix * vec4(vPosition, 1.0);\r\n}`;\r\n\r\nconst sidesFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec3 uEyePos;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec2 vNormal;\r\nvarying float relativeHeight; //relative to amplitude, in [-1, +1]\r\n\r\n___ENCODE_DECODE___\r\n\r\n___WATER_COMMON___\r\n\r\n/* Returns true for every fragment above the water level */\r\nbool shouldSkip()\r\n{\r\n    float surface = decodeHeight(texture2D(uWater, vPosition.xy + .5));\r\n    return (relativeHeight > surface);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    /* Skip the fragments above water level */\r\n    if (shouldSkip()) {\r\n        discard;\r\n    }\r\n\r\n    vec3 fromEye = normalize(vPosition - uEyePos);\r\n    vec3 normal = vec3(vNormal, 0); //already normalized\r\n    \r\n    vec3 color = computeColor(vPosition, fromEye, normal);\r\n\r\n    gl_FragColor = vec4(color, 1);\r\n}`;\r\n\r\nconst surfaceVert: string =\r\n    `attribute vec2 aSampleCoords; //in [0,1] x [0,1]\r\n\r\nuniform mat4 uMVPMatrix;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    float height = decodeHeight(texture2D(uWater, aSampleCoords));\r\n\r\n    float dH = uAmplitude / 2.0;\r\n\r\n    vPosition.xy = aSampleCoords - .5;\r\n    vPosition.z = uWaterLevel + dH * height;\r\n    vPosition.z -= 0.001; //slight shift to avoid artifacts at surface-sides jointure\r\n\r\n    vNormal = decodeNormal(texture2D(uNormals, aSampleCoords), uAmplitude);\r\n    \r\n    gl_Position = uMVPMatrix * vec4(vPosition, 1.0);\r\n}`;\r\n\r\nconst surfaceFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform vec3 uEyePos;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\n___WATER_COMMON___\r\n\r\nvoid main(void)\r\n{\r\n    vec3 fromEye = normalize(vPosition - uEyePos);\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 color = computeColor(vPosition, fromEye, normal);\r\n\r\n    gl_FragColor = vec4(color, 1);\r\n}`;\r\n\r\nfunction buildSidesShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = sidesVert;\r\n    let fragSrc = sidesFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n    fragSrc = fragSrc.replace(/___WATER_COMMON___/g, waterCommonStr);\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nfunction buildSurfaceShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = surfaceVert.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n    let fragSrc = surfaceFrag.replace(/___WATER_COMMON___/g, waterCommonStr);\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nexport {\r\n    buildSidesShader,\r\n    buildSurfaceShader,\r\n};","import Viewer from \"./viewer\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\nimport Water from \"../water\";\r\nimport Caustics from \"./caustics\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport * as ShadersBuilder from \"./viewer3D-shaders\";\r\nimport OrbitalCamera from \"../orbitalCamera\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\ndeclare const mat4: any;\r\ndeclare const vec3: any;\r\n\r\nclass Viewer3D extends Viewer {\r\n    private _vertices: WebGLBuffer;\r\n    private _normals: WebGLBuffer;\r\n\r\n    private _pMatrix: number[];\r\n    private _mvpMatrix: number[];\r\n    private _camera: OrbitalCamera;\r\n    private _lightDirection: number[];\r\n\r\n    private _sidesShader: Shader;\r\n    private _surfaceShader: Shader;\r\n\r\n    private _gridWidth: number;\r\n    private _gridHeight: number;\r\n\r\n    private _gridVertices: WebGLBuffer;\r\n    private _gridIndices: WebGLBuffer;\r\n\r\n    constructor(gl: WebGLRenderingContext, common: ViewerCommon) {\r\n        super(gl);\r\n        const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n        this._pMatrix = mat4.create();\r\n        this._mvpMatrix = mat4.create();\r\n        mat4.perspective(this._pMatrix, 45, canvas.clientWidth / canvas.clientHeight, 0.1, 100.0);\r\n\r\n        this._camera = new OrbitalCamera([0, 0, this.waterLevel - .5], 1.7);\r\n        this._camera.theta = 0;\r\n        this._camera.phi = 0.8;\r\n\r\n        this._lightDirection = vec3.fromValues(1, 0, -1);\r\n        vec3.normalize(this._lightDirection, this._lightDirection);\r\n\r\n        const n = 256;\r\n        this.initSurface(n, n);\r\n\r\n        this.init();\r\n\r\n        const shaders = [this._sidesShader, this._surfaceShader];\r\n        for (let shader of shaders) {\r\n            shader.u[\"uTileTexture\"].value = common.tileTexture;\r\n            shader.u[\"uCaustics\"].value = common.caustics.texture;\r\n            shader.u[\"uLightDir\"].value = this._lightDirection;\r\n        }\r\n\r\n        const minPhi = 0.000001, maxPhi = 1.2;\r\n        Page.Canvas.Observers.mouseDrag.push((dX: number, dY: number) => {\r\n            this._camera.theta -= 0.5 * 2 * 3.14159 * dX;\r\n            this._camera.phi -= 0.5 * 2 * dY;\r\n            this._camera.phi = Math.min(maxPhi, Math.max(minPhi, this._camera.phi));\r\n            this.updateMVPMatrix();\r\n        });\r\n\r\n        const minDist = 1.42, maxDist = 3;\r\n        Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n            let d = this._camera.distance + 0.2 * delta;\r\n            d = Math.min(maxDist, Math.max(minDist, d));\r\n            this._camera.distance = d;\r\n            this.updateMVPMatrix();\r\n        });\r\n    }\r\n\r\n    private updatePMatrix(): void {\r\n      const canvas = super.gl().canvas as HTMLCanvasElement;\r\n        mat4.perspective(this._pMatrix, 45, canvas.clientWidth / canvas.clientHeight, 0.1, 100.0);\r\n    }\r\n\r\n    private updateMVPMatrix(): void {\r\n        this.updatePMatrix();\r\n        mat4.multiply(this._mvpMatrix, this._pMatrix, this._camera.viewMatrix);\r\n    }\r\n\r\n    public initSurface(w: number, h: number): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._gridWidth = w;\r\n        this._gridHeight = h;\r\n\r\n        /* Grid vertices */\r\n        {\r\n            const nX = this._gridWidth;\r\n            const nY = this._gridHeight;\r\n            {\r\n                const vert = [];\r\n                for (let iY = 0; iY < nY; ++iY) {\r\n                    for (let iX = 0; iX < nX; ++iX) {\r\n                        vert.push(iX / (nX - 1));\r\n                        vert.push(iY / (nY - 1));\r\n                    }\r\n                }\r\n                const array = new Float32Array(vert);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n                this._gridVertices = id;\r\n            }\r\n            {\r\n                const indices = [];\r\n                for (let iY = 0; iY < nY - 1; ++iY) {\r\n                    for (let iX = 0; iX < nX - 1; ++iX) {\r\n                        indices.push(iY * nX + iX);\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n                    }\r\n                }\r\n\r\n                const array = new Uint16Array(indices);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n                this._gridIndices = id;\r\n            }\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        gl.deleteBuffer(this._vertices);\r\n        gl.deleteBuffer(this._normals);\r\n        this._sidesShader.freeGLResources();\r\n        this._surfaceShader.freeGLResources();\r\n\r\n        gl.deleteBuffer(this._gridVertices);\r\n        gl.deleteBuffer(this._gridIndices);\r\n    }\r\n\r\n    public display(water: Water, common: ViewerCommon): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        /* Update camera position */\r\n        this._sidesShader.u[\"uEyePos\"].value = this._camera.eyePos;\r\n        this._surfaceShader.u[\"uEyePos\"].value = this._camera.eyePos;\r\n\r\n        this.updateMVPMatrix();\r\n\r\n        /* Actual displaying */\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        this.displaySides(water);\r\n        this.displaySurface(water);\r\n    }\r\n\r\n    public interact(water: Water): void {\r\n    }\r\n\r\n    private displaySides(water: Water): void {\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._sidesShader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n\r\n        shader.use();\r\n        shader.bindUniforms();\r\n\r\n        const vLoc = 0;\r\n        const nLoc = 1;\r\n        gl.enableVertexAttribArray(vLoc);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertices);\r\n        gl.vertexAttribPointer(vLoc, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.enableVertexAttribArray(nLoc);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._normals);\r\n        gl.vertexAttribPointer(nLoc, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 4 * 6);\r\n\r\n        gl.disableVertexAttribArray(nLoc);\r\n        gl.disableVertexAttribArray(vLoc);\r\n    }\r\n\r\n    private displaySurface(water: Water): void {\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._surfaceShader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n        shader.u[\"uNormals\"].value = water.normalmap;\r\n\r\n        shader.use();\r\n        shader.bindUniforms();\r\n\r\n        gl.enableVertexAttribArray(0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._gridVertices);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._gridIndices);\r\n\r\n        const nbTriangles = 2 * (this._gridWidth - 1) * (this._gridHeight - 1);\r\n        gl.drawElements(gl.TRIANGLES, 3 * nbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.disableVertexAttribArray(0);\r\n    }\r\n\r\n    private init() {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._sidesShader = ShadersBuilder.buildSidesShader(gl);\r\n        this._sidesShader.u[\"uMVPMatrix\"].value = this._mvpMatrix;\r\n\r\n        this._surfaceShader = ShadersBuilder.buildSurfaceShader(gl);\r\n        this._surfaceShader.u[\"uMVPMatrix\"].value = this._mvpMatrix;\r\n\r\n        /* Buffer data */\r\n        {\r\n            const vert = [\r\n                +.5, -.5, +1,\r\n                -.5, -.5, +1,\r\n                -.5, -.5, +0,\r\n                +.5, -.5, +1,\r\n                -.5, -.5, +0,\r\n                +.5, -.5, +0,\r\n\r\n                +.5, +.5, +1,\r\n                +.5, -.5, +1,\r\n                +.5, -.5, +0,\r\n                +.5, +.5, +1,\r\n                +.5, -.5, +0,\r\n                +.5, +.5, +0,\r\n\r\n                +.5, +.5, +1,\r\n                -.5, +.5, +0,\r\n                -.5, +.5, +1,\r\n                -.5, +.5, +0,\r\n                +.5, +.5, +1,\r\n                +.5, +.5, +0,\r\n\r\n                -.5, -.5, +1,\r\n                -.5, +.5, +1,\r\n                -.5, -.5, +0,\r\n                -.5, -.5, +0,\r\n                -.5, +.5, +1,\r\n                -.5, +.5, +0,];\r\n\r\n            const id = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vert), gl.STATIC_DRAW);\r\n            this._vertices = id;\r\n        }\r\n\r\n        {\r\n            const norm = [\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,];\r\n\r\n            const id = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(norm), gl.STATIC_DRAW);\r\n            this._normals = id;\r\n        }\r\n    }\r\n\r\n    protected updateSpecular(): void {\r\n        this._sidesShader.u[\"uSpecular\"].value = this.specular;\r\n        this._surfaceShader.u[\"uSpecular\"].value = this.specular;\r\n    }\r\n\r\n    protected updateCaustics(): void {\r\n        this._sidesShader.u[\"uShowCaustics\"].value = this.caustics;\r\n        this._surfaceShader.u[\"uShowCaustics\"].value = this.caustics;\r\n    }\r\n\r\n    protected updateFresnel(): void {\r\n        this._sidesShader.u[\"uFresnel\"].value = this.fresnel;\r\n        this._surfaceShader.u[\"uFresnel\"].value = this.fresnel;\r\n    }\r\n\r\n    protected updateAmplitude(): void {\r\n        const amplitude = 5 * this.amplitude;\r\n        this._sidesShader.u[\"uAmplitude\"].value = amplitude;\r\n        this._surfaceShader.u[\"uAmplitude\"].value = amplitude;\r\n    }\r\n\r\n    protected updateWaterLevel(): void {\r\n        this._sidesShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n        this._surfaceShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n        this._camera.focusPoint = [0, 0, this.waterLevel - .5];\r\n        this.updateMVPMatrix();\r\n    }\r\n\r\n    protected updateOpacity(): void {\r\n        this._sidesShader.u[\"uOpacity\"].value = this.opacity;\r\n        this._surfaceShader.u[\"uOpacity\"].value = this.opacity;\r\n    }\r\n\r\n    protected updateEta(): void {\r\n        this._sidesShader.u[\"uEta\"].value = this.eta;\r\n        this._surfaceShader.u[\"uEta\"].value = this.eta;\r\n\r\n        let F0 = (1 - this.eta) / (1 + this.eta);\r\n        F0 = F0 * F0;\r\n        this._sidesShader.u[\"uF0\"].value = F0;\r\n        this._surfaceShader.u[\"uF0\"].value = F0;\r\n    }\r\n}\r\n\r\nexport default Viewer3D;","import GLResource from \"../gl-utils/gl-resource\";\r\nimport Caustics from \"./caustics\";\r\n\r\nclass ViewerCommon extends GLResource {\r\n    private _caustics: Caustics;\r\n\r\n    private _tileTexture: WebGLTexture;\r\n\r\n    constructor(gl: WebGLRenderingContext, causticsRes: number, tileTexPath: string) {\r\n        function isPowerOf2(n) {\r\n            if (typeof n !== 'number')\r\n                return 'Not a number';\r\n\r\n            return n && (n & (n - 1)) === 0;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        /* Create caustics */\r\n        this._caustics = new Caustics(gl, causticsRes, causticsRes);\r\n\r\n        /* Create tile texture. Default texture is blue 1x1 texture. */\r\n        this._tileTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this._tileTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\r\n\r\n        const tileImg = new Image();\r\n        const tileTexture = this._tileTexture;\r\n        tileImg.onload = function () {\r\n            gl.bindTexture(gl.TEXTURE_2D, tileTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tileImg);\r\n\r\n            if (isPowerOf2(tileImg.width) && isPowerOf2(tileImg.height)) {\r\n                gl.generateMipmap(gl.TEXTURE_2D);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            }\r\n        };\r\n        tileImg.src = tileTexPath;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._caustics.freeGLResources();\r\n        this._caustics = null;\r\n\r\n        gl.deleteTexture(this._tileTexture);\r\n        this._tileTexture = null;\r\n    }\r\n\r\n    get caustics(): Caustics {\r\n        return this._caustics;\r\n    }\r\n\r\n    get tileTexture(): WebGLTexture {\r\n        return this._tileTexture;\r\n    }\r\n}\r\n\r\nexport default ViewerCommon;","import Shader from \"./gl-utils/shader\";\r\nimport VBO from \"./gl-utils/vbo\";\r\n\r\nconst encodeDecodeStr: string =\r\n    `const float HEIGHT_RANGE = 1.0;\r\nconst float VEL_RANGE = 0.25;\r\n\r\nstruct Cell {\r\n    float h; //height\r\n    float v; //velocity\r\n};\r\n\r\n/* Decodes a float value (16 bits in [0,1])\r\n * from a 2D value (2x8bits in [0,1]x[0,1]) */\r\nfloat decode16bit(vec2 v)\r\n{\r\n    const vec2 weights = 255.0 * vec2(256.0, 1.0) / (256.0*256.0 - 1.0);\r\n    return dot(weights, v);\r\n}\r\n\r\n/* Encodes a float value (16 bits in [0,1])\r\n * into a 2D value (2x8bits in [0,1]x[0,1]) */\r\nvec2 encode16bit(float f)\r\n{\r\n    const vec2 base = (256.0*256.0 - 1.0) / vec2(256.0, 1.0);\r\n    return floor(mod(f * base, 256.0)) / 255.0;\r\n}\r\n\r\nfloat decode(vec2 v, float range)\r\n{\r\n    return (2.0 * decode16bit(v) - 1.0) * range;\r\n}\r\n\r\nvec2 encode(float value, float range)\r\n{\r\n    return encode16bit(0.5 * value / range + 0.5);\r\n}\r\n\r\nfloat decodeHeight(vec4 texel)\r\n{\r\n    return decode(texel.rg, HEIGHT_RANGE);\r\n}\r\nvec2 encodeHeight(float h)\r\n{\r\n    return encode(h, HEIGHT_RANGE);\r\n}\r\n\r\nvec3 decodeNormal(vec4 texel, float amplitude)\r\n{\r\n    vec3 result = 2.0 * texel.rgb - 1.0;\r\n    return normalize(result * vec3(amplitude, amplitude, 1));\r\n}\r\nvec4 encodeNormal(vec3 n)\r\n{\r\n    return vec4(0.5 * n + 0.5, 1);\r\n}\r\n\r\nfloat decodeVelocity(vec4 texel)\r\n{\r\n    return decode(texel.ba, VEL_RANGE);\r\n}\r\nvec2 encodeVelocity(float h)\r\n{\r\n    return encode(h, VEL_RANGE);\r\n}\r\n\r\nCell decodeCell(vec4 texel)\r\n{\r\n    return Cell(decodeHeight(texel), decodeVelocity(texel));\r\n}\r\nvec4 encodeCell(Cell cell)\r\n{\r\n    return vec4(encodeHeight(cell.h), encodeVelocity(cell.v));\r\n}`;\r\n\r\nconst fullscreenVert: string =\r\n    `attribute vec2 aCorner; //{0,1}x{0,1}\r\n\r\nvarying vec2 sampleCoords;\r\n\r\nvoid main(void) {\r\n    sampleCoords = aCorner;\r\n    gl_Position = vec4(2.0*aCorner - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst touchFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec2 uCoords;\r\nuniform vec2 uSize;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    Cell cell = decodeCell(texture2D(uWater, sampleCoords));\r\n\r\n    float dist = length((sampleCoords - uCoords) / uSize);\r\n    dist = clamp(dist, 0.0, 1.0);\r\n\r\n    cell.h = mix(-0.6*HEIGHT_RANGE, cell.h, smoothstep(0.0, 1.0, dist));\r\n    cell.v *= step(1.0, dist);\r\n\r\n    gl_FragColor = encodeCell(cell);\r\n}`;\r\n\r\nconst updateFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uPrevWater;\r\n\r\nuniform float uDt;\r\nuniform vec2 uTexelSize;\r\n\r\nuniform float uC; //surface tension\r\nuniform float uK; // vertical spring's stiffness\r\nuniform float uF; //friction\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    Cell cell = decodeCell(texture2D(uPrevWater, sampleCoords));\r\n\r\n    float neighbours = decodeHeight(texture2D(uPrevWater, sampleCoords + vec2(uTexelSize.x, 0))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords - vec2(uTexelSize.x, 0))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords + vec2(0, uTexelSize.y))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords - vec2(0, uTexelSize.y)));\r\n    neighbours *= 0.25;\r\n\r\n    /* Update velocity */\r\n    cell.v += -uDt * uK * cell.h; //vertical spring\r\n    cell.v += uDt * uC * (neighbours - cell.h); //surface tension\r\n    cell.v *= uF; //attenuation\r\n\r\n    /* Update position */\r\n    cell.h += uDt * cell.v;\r\n\r\n    gl_FragColor = encodeCell(cell);\r\n}`;\r\n\r\nconst normalsFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec2 uTexelSize;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\n/* Returns the normal, assuming the amplitude is 1. */\r\nvec3 computeNormal(vec2 coords)\r\n{\r\n    float dZx = decodeHeight(texture2D(uWater, coords + vec2(uTexelSize.x, 0))) -\r\n                decodeHeight(texture2D(uWater, coords - vec2(uTexelSize.x, 0)));\r\n    \r\n    float dZy = decodeHeight(texture2D(uWater, coords + vec2(0, uTexelSize.y))) -\r\n                decodeHeight(texture2D(uWater, coords - vec2(0, uTexelSize.y)));\r\n    \r\n    vec3 normal = cross(vec3(uTexelSize.x, 0, dZx), vec3(0, uTexelSize.y, dZy));\r\n    normal.xy *= 0.4 * HEIGHT_RANGE;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main(void) {\r\n    vec3 normal = computeNormal(sampleCoords);\r\n\r\n    gl_FragColor = encodeNormal(normal);\r\n}`;\r\n\r\nfunction buildTouchShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = touchFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nfunction buildUpdateShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = updateFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nfunction buildNormalsShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = normalsFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nexport {\r\n    encodeDecodeStr,\r\n    buildTouchShader,\r\n    buildUpdateShader,\r\n    buildNormalsShader,\r\n};","import GLResource from \"./gl-utils/gl-resource\";\r\nimport FBO from \"./gl-utils/fbo\";\r\nimport Shader from \"./gl-utils/shader\";\r\nimport * as ShaderBuilder from \"./water-shaders\";\r\n\r\nclass Water extends GLResource {\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    private _FBO: FBO;\r\n\r\n    private _normalsTex: WebGLTexture;\r\n    private _heightmapsTex: WebGLTexture[];\r\n    private _currIndex: number;\r\n\r\n    private _touchShader: Shader;\r\n    private _updateShader: Shader;\r\n    private _normalsShader: Shader;\r\n\r\n    private _surfaceTension: number;\r\n    private _springStiffness: number;\r\n    private _dispersion: number;\r\n\r\n    public rain: boolean;\r\n\r\n    constructor(gl: WebGLRenderingContext, w: number, h: number) {\r\n        super(gl);\r\n\r\n        this._FBO = new FBO(gl, w, h);\r\n        this._touchShader = ShaderBuilder.buildTouchShader(gl);\r\n        this._updateShader = ShaderBuilder.buildUpdateShader(gl);\r\n        this._normalsShader = ShaderBuilder.buildNormalsShader(gl);\r\n\r\n        this.surfaceTension = 20.0;\r\n        this.springStiffness = 0.1;\r\n        this.dispersion = 0.999;\r\n\r\n        this.rain = true;\r\n\r\n        this.reset(w, h);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        if (this._FBO) {\r\n            this._FBO.freeGLResources();\r\n        }\r\n\r\n        this.freeTextures();\r\n        this.freeShaders();\r\n    }\r\n\r\n    private freeTextures(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        if (this._normalsTex) {\r\n            gl.deleteTexture(this._normalsTex);\r\n        }\r\n        if (this._heightmapsTex) {\r\n            gl.deleteTexture(this._heightmapsTex[0]);\r\n            gl.deleteTexture(this._heightmapsTex[1]);\r\n        }\r\n    }\r\n\r\n    private freeShaders(): void {\r\n        if (this._touchShader) {\r\n            this._touchShader.freeGLResources();\r\n        }\r\n\r\n        if (this._updateShader) {\r\n            this._updateShader.freeGLResources();\r\n        }\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        const gl = this.gl(); //shortcut\r\n\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.disable(gl.DEPTH_TEST);\r\n\r\n        if (this.rain && Math.random() < 0.1) {\r\n            this.touch(Math.random() * this.width, Math.random() * this.height, 8);\r\n        }\r\n\r\n        const updateShader = this._updateShader;\r\n\r\n        updateShader.u[\"uPrevWater\"].value = this.currHeightmap;\r\n        updateShader.u[\"uDt\"].value = dt * 10;\r\n\r\n        this._FBO.bind([this.nextHeightmap]);\r\n        updateShader.use();\r\n        updateShader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n        this.switchHeightmaps();\r\n\r\n        this.computeNormals();\r\n    }\r\n\r\n    private computeNormals(): void {\r\n        const gl = this.gl(); //shortcut\r\n        const shader = this._normalsShader;\r\n\r\n        shader.u[\"uWater\"].value = this.currHeightmap;\r\n\r\n        this._FBO.bind([this._normalsTex]);\r\n        shader.use();\r\n        shader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n\r\n    public touch(coordX: number, coordY: number, radius: number): void {\r\n        const gl = this.gl(); //shortcut\r\n        const touchShader = this._touchShader;\r\n\r\n        touchShader.u[\"uWater\"].value = this.currHeightmap;\r\n        touchShader.u[\"uCoords\"].value = [coordX / this.width, coordY / this.height];\r\n        touchShader.u[\"uSize\"].value = [radius / this.width, radius / this.height];\r\n\r\n        this._FBO.bind([this.nextHeightmap]);\r\n        touchShader.use();\r\n        touchShader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n        this.switchHeightmaps();\r\n        this.computeNormals();\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set surfaceTension(c: number) {\r\n        this._surfaceTension = c;\r\n        this._updateShader.u[\"uC\"].value = c;\r\n    }\r\n    set springStiffness(k: number) {\r\n        this._springStiffness = k;\r\n        this._updateShader.u[\"uK\"].value = k;\r\n    }\r\n    set dispersion(f: number) {\r\n        this._dispersion = f;\r\n        this._updateShader.u[\"uF\"].value = f;\r\n    }\r\n\r\n    get surfaceTension(): number {\r\n        return this._surfaceTension;\r\n    }\r\n    get springStiffness(): number {\r\n        return this._springStiffness;\r\n    }\r\n    get dispersion(): number {\r\n        return this._dispersion;\r\n    }\r\n\r\n    get heightmap(): WebGLTexture {\r\n        return this._heightmapsTex[this._currIndex];\r\n    }\r\n\r\n    get normalmap(): WebGLTexture {\r\n        return this._normalsTex;\r\n    }\r\n\r\n    private get currHeightmap(): WebGLTexture {\r\n        return this._heightmapsTex[this._currIndex];\r\n    }\r\n\r\n    private get nextHeightmap(): WebGLTexture {\r\n        return this._heightmapsTex[(this._currIndex + 1) % 2];\r\n    }\r\n\r\n    private switchHeightmaps(): void {\r\n        this._currIndex = (this._currIndex + 1) % 2;\r\n    }\r\n\r\n    public reset(w: number, h: number): void {\r\n        this.freeTextures();\r\n\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._width = w;\r\n        this._height = h;\r\n        this._FBO.width = w;\r\n        this._FBO.height = h;\r\n\r\n        this._updateShader.u[\"uTexelSize\"].value = [1 / w, 1 / h];\r\n        this._normalsShader.u[\"uTexelSize\"].value = [1 / w, 1 / h];\r\n\r\n        const uintTexels: number[] = new Array(4 * w * h);\r\n        for (let i = 0; i < uintTexels.length;  ++i) {\r\n            uintTexels[i] = 127;\r\n        }\r\n        const uintData = new Uint8Array(uintTexels);\r\n\r\n        const wrap = gl.REPEAT;\r\n        const filter = gl.LINEAR;\r\n        let textures: WebGLTexture[] = [];\r\n        for (let i = 0; i < 2; ++i) {\r\n            let texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0,\r\n                gl.RGBA, gl.UNSIGNED_BYTE, uintData);\r\n            textures.push(texture);\r\n        }\r\n        {\r\n            let texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, w, h, 0,\r\n                gl.RGB, gl.UNSIGNED_BYTE, uintData);\r\n            textures.push(texture);\r\n        }\r\n\r\n        for (let iT of textures) {\r\n            gl.bindTexture(gl.TEXTURE_2D, iT);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n        }\r\n\r\n        this._normalsTex = textures[2];\r\n        this._heightmapsTex = [textures[0], textures[1]];\r\n        this._currIndex = 0;\r\n\r\n        this.computeNormals();\r\n    }\r\n}\r\n\r\nexport default Water;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"names":["bind","water","viewer2D","viewer3D","RESOLUTION_CONTROL_ID","setResolution","resolution","size","reset","Page","Tabs","addObserver","getValues","RAIN_CONTROL_ID","updateRain","enable","rain","Checkbox","isChecked","TENSION_CONTROL_ID","updateTension","tension","surfaceTension","Range","getValue","SPRING_CONTROL_ID","updateSpring","stiffness","springStiffness","DISPERSION_CONTROL_ID","updateDispersion","dispersion","SPECULAR_CONTROL_ID","updateSpecular","specular","CAUSTICS_CONTROL_ID","updateCaustics","caustics","FRESNEL_CONTROL_ID","fresnel","AMPLITUDE_CONTROL_ID","updateAmplitude","amplitude","LEVEL_CONTROL_ID","updateWaterLevel","level","waterLevel","OPACITY_CONTROL_ID","updateOpacity","opacity","ETA_CONTROL_ID","updateEta","eta","bindControls","bindRendererChooser","choose2D","choose3D","bindViewer","viewerStr","VIEWER_CONTROL_ID","gl","width","height","id","createFramebuffer","colorBuffers","depthBuffer","bindFramebuffer","FRAMEBUFFER","this","viewport","i","length","framebufferTexture2D","TEXTURE_2D","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_ATTACHMENT","bindDefault","drawingBufferWidth","drawingBufferHeight","left","lower","freeGLResources","deleteFramebuffer","FBO","_gl","GLResource","notImplemented","location","value","alert","types","str","binder","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","ACTIVE_UNIFORMS","u","uniform","getActiveUniform","name","loc","getUniformLocation","ACTIVE_ATTRIBUTES","a","attribute","getActiveAttrib","VBO","getAttribLocation","use","useProgram","bindUniforms","currTextureUnitNb","uName","bindAttributes","aName","bindUniformsAndAttributes","ShaderProgram","resizeCanvas","hidpi","cssPixel","window","devicePixelRatio","canvas","Math","floor","clientWidth","clientHeight","array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","normalize","stride","offset","deleteBuffer","createQuad","minX","minY","maxX","maxY","Float32Array","FLOAT","enableVertexAttribArray","vertexAttribPointer","flags","setError","message","Demopage","setErrorMessage","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","Utils","initGL","Canvas","getCanvas","toggleFullscreen","fullscreen","getCanvasContainer","style","background","Observers","fullscreenToggle","push","isFullScreen","viewerCommon","Controls","viewer","instantFPS","setInterval","setIndicatorText","toFixed","lastUpdateTime","lastFrameTime","requestAnimationFrame","mainLoop","time","interact","update","compute","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","display","main","focusPoint","distance","_focus","_distance","_theta","_phi","_eyePos","_viewMatrix","mat4","create","recompute","newFocus","newDistance","newTheta","newPhi","sin","cos","phi","theta","lookAt","eyePos","OrbitalCamera","buildCausticsShader","vertSrc","replace","encodeDecodeStr","w","h","_supported","getExtension","_gridWidth","_gridHeight","_shader","_texture","deleteTexture","_fbo","_vertices","_indices","supported","heightmap","normalmap","ELEMENT_ARRAY_BUFFER","nbTriangles","drawElements","TRIANGLES","UNSIGNED_SHORT","disableVertexAttribArray","_width","_height","ShadersBuilder","data","uintData","Uint8Array","wrap","CLAMP_TO_EDGE","filter","LINEAR","createTexture","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","nX","nY","vert","iY","iX","indices","Uint16Array","Caustics","_showSpecular","b","_showCaustics","_useFresnel","updateFresnel","_amplitude","_waterLevel","d","_opacity","o","_eta","e","Viewer","buildDisplayShader","fragSrc","common","_displayShader","tileTexture","texture","_viewport","updateViewport","side","min","displayShader","drawArrays","TRIANGLE_STRIP","isMouseDown","canvasSize","getSize","p","getMousePosition","touch","Viewer2D","waterCommonStr","buildSidesShader","buildSurfaceShader","_pMatrix","_mvpMatrix","perspective","_camera","_lightDirection","vec3","fromValues","initSurface","init","_sidesShader","_surfaceShader","mouseDrag","dX","dY","max","updateMVPMatrix","mouseWheel","delta","updatePMatrix","multiply","viewMatrix","_gridVertices","_gridIndices","_normals","displaySides","displaySurface","F0","Viewer3D","causticsRes","tileTexPath","isPowerOf2","n","_caustics","_tileTexture","RGBA","tileImg","Image","onload","generateMipmap","REPEAT","src","ViewerCommon","buildTouchShader","fullscreenVert","buildUpdateShader","buildNormalsShader","_FBO","_touchShader","ShaderBuilder","_updateShader","_normalsShader","freeTextures","freeShaders","_normalsTex","_heightmapsTex","dt","random","updateShader","currHeightmap","nextHeightmap","switchHeightmaps","computeNormals","coordX","coordY","radius","touchShader","_surfaceTension","c","_springStiffness","k","_dispersion","f","_currIndex","uintTexels","textures","iT","Water","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}
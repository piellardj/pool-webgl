{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/gl-utils/gl-resource.ts","webpack:///./src/ts/gl-utils/fbo.ts","webpack:///./src/ts/water-shaders.ts","webpack:///./src/ts/gl-utils/shader.ts","webpack:///./src/ts/gl-utils/vbo.ts","webpack:///./src/ts/viewer/viewer.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/gl-utils/utils.ts","webpack:///./src/ts/water.ts","webpack:///./src/ts/viewer/viewer2D.ts","webpack:///./src/ts/gl-utils/viewport.ts","webpack:///./src/ts/viewer/viewer2D-shaders.ts","webpack:///./src/ts/viewer/viewer3D.ts","webpack:///./src/ts/viewer/viewer3D-shaders.ts","webpack:///./src/ts/orbitalCamera.ts","webpack:///./src/ts/viewer/viewerCommon.ts","webpack:///./src/ts/viewer/caustics.ts","webpack:///./src/ts/viewer/caustics-shaders.ts","webpack:///./src/ts/controls.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","gl","this","_gl","GLResource","width","height","id","createFramebuffer","colorBuffers","depthBuffer","bindFramebuffer","FRAMEBUFFER","viewport","length","framebufferTexture2D","TEXTURE_2D","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_ATTACHMENT","bindDefault","drawingBufferWidth","drawingBufferHeight","left","lower","freeGLResources","deleteFramebuffer","FBO","encodeDecodeStr","buildTouchShader","fragSrc","replace","shader","fullscreenVert","a","VBO","createQuad","buildUpdateShader","buildNormalsShader","notImplemented","location","alert","types","str","binder","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","ACTIVE_UNIFORMS","u","uniform","getActiveUniform","loc","getUniformLocation","size","ACTIVE_ATTRIBUTES","attribute","getActiveAttrib","getAttribLocation","use","useProgram","bindUniforms","currTextureUnitNb","uName","bindAttributes","aName","bindUniformsAndAttributes","ShaderProgram","array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","normalize","stride","offset","deleteBuffer","minX","minY","maxX","maxY","Float32Array","FLOAT","enableVertexAttribArray","vertexAttribPointer","_showSpecular","b","updateSpecular","_showCaustics","updateCaustics","_useFresnel","updateFresnel","_amplitude","updateAmplitude","_waterLevel","updateWaterLevel","_opacity","updateOpacity","_eta","e","updateEta","Viewer","canvas","flags","setError","message","Page","Demopage","setErrorMessage","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","Utils","resizeCanvas","initGL","Canvas","getCanvas","toggleFullscreen","fullscreen","getCanvasContainer","style","background","Observers","fullscreenToggle","push","isFullScreen","water","viewerCommon","viewer2D","viewer3D","Controls","viewer","bindRendererChooser","instantFPS","setInterval","setIndicatorText","toFixed","lastUpdateTime","lastFrameTime","requestAnimationFrame","mainLoop","time","interact","update","caustics","compute","amplitude","waterLevel","eta","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","display","main","hidpi","cssPixel","window","devicePixelRatio","Math","floor","clientWidth","clientHeight","w","h","_FBO","_touchShader","ShaderBuilder","_updateShader","_normalsShader","surfaceTension","springStiffness","dispersion","rain","reset","freeTextures","freeShaders","_normalsTex","deleteTexture","_heightmapsTex","dt","random","touch","updateShader","currHeightmap","nextHeightmap","drawArrays","TRIANGLE_STRIP","switchHeightmaps","computeNormals","coordX","coordY","radius","touchShader","_width","_height","_surfaceTension","_springStiffness","k","_dispersion","f","_currIndex","uintTexels","uintData","Uint8Array","wrap","REPEAT","filter","LINEAR","textures","texture","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","RGB","iT","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","Water","common","_displayShader","ShadersBuilder","buildDisplayShader","tileTexture","_viewport","updateViewport","side","min","displayShader","heightmap","normalmap","isMouseDown","canvasSize","getSize","getMousePosition","specular","opacity","Viewer2D","Viewport","_pMatrix","mat4","_mvpMatrix","perspective","_camera","theta","phi","_lightDirection","vec3","fromValues","initSurface","init","_sidesShader","_surfaceShader","mouseDrag","dX","dY","max","updateMVPMatrix","mouseWheel","delta","distance","updatePMatrix","multiply","viewMatrix","_gridWidth","_gridHeight","nX","nY","vert","iY","iX","_gridVertices","indices","Uint16Array","ELEMENT_ARRAY_BUFFER","_gridIndices","_vertices","_normals","eyePos","enable","displaySides","displaySurface","TRIANGLES","disableVertexAttribArray","nbTriangles","drawElements","UNSIGNED_SHORT","buildSidesShader","buildSurfaceShader","fresnel","focusPoint","F0","Viewer3D","waterCommonStr","vertSrc","_focus","_distance","_theta","_phi","_eyePos","_viewMatrix","recompute","newFocus","newDistance","newTheta","newPhi","sin","cos","lookAt","OrbitalCamera","causticsRes","tileTexPath","isPowerOf2","_caustics","_tileTexture","tileImg","Image","onload","generateMipmap","src","ViewerCommon","_supported","getExtension","_shader","_texture","_fbo","_indices","supported","buildCausticsShader","data","CLAMP_TO_EDGE","Caustics","setResolution","resolution","Tabs","addObserver","getValues","updateRain","Checkbox","isChecked","updateTension","tension","Range","getValue","updateSpring","stiffness","updateDispersion","level","bindControls","choose2D","choose3D","bindViewer","viewerStr"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gFClFrD,iBAGE,WAAYC,GACVC,KAAKC,IAAMF,EAOf,OAJS,YAAAA,GAAP,WACE,OAAOC,KAAKC,KAGhB,EAXA,GAaA,UAAeC,G,ogBCbf,IAGA,cAKI,WAAYH,EAA2BI,EAAeC,GAAtD,MACI,YAAML,IAAG,K,OAET,EAAKM,GAAKN,EAAGO,oBACb,EAAKH,MAAQA,EACb,EAAKC,OAASA,E,EAoCtB,OA9CkB,OAaP,YAAAb,KAAP,SAAYgB,EAA8BC,QAAA,IAAAA,MAAA,MACtC,IAAMT,EAAK,YAAMA,GAAE,WAEnBA,EAAGU,gBAAgBV,EAAGW,YAAaV,KAAKK,IACxCN,EAAGY,SAAS,EAAG,EAAGX,KAAKG,MAAOH,KAAKI,QAEnC,IAAK,IAAIrC,EAAI,EAAGA,EAAIwC,EAAaK,SAAU7C,EACzCgC,EAAGc,qBACDd,EAAGW,YAAaX,EAAG,mBAAqBhC,GAAIgC,EAAGe,WAAYP,EAAaxC,GAAI,GAG5EyC,IACFT,EAAGgB,iBAAiBhB,EAAGiB,aAAcR,GACrCT,EAAGkB,wBACDlB,EAAGW,YAAaX,EAAGmB,iBAAkBnB,EAAGiB,aAAcR,KAIhD,EAAAW,YAAd,SAA0BpB,EAA2BY,QAAA,IAAAA,MAAA,MACjDZ,EAAGU,gBAAgBV,EAAGW,YAAa,MAElB,OAAbC,EACAZ,EAAGY,SAAS,EAAG,EAAGZ,EAAGqB,mBAAoBrB,EAAGsB,qBAE5CtB,EAAGY,SAASA,EAASW,KAAMX,EAASY,MAAOZ,EAASR,MAAOQ,EAASP,SAKrE,YAAAoB,gBAAP,WACI,YAAMzB,GAAE,WAAG0B,kBAAkBzB,KAAKK,IAClCL,KAAKK,GAAK,MAElB,EA9CA,CAHA,QAGkB,SAgDlB,UAAeqB,G,uPCnDf,cACA,UAEMC,EACF,4/CAyMA,EAAAA,kBACA,EAAAC,iBA7BJ,SAA0B7B,GACtB,IACM8B,EA7FN,seA6F0BC,QAAQ,uBAAwBH,GAEpDI,EAAiB,IAAI,UAAOhC,EAHViC,iLAGuBH,GAE/C,OADAE,EAAOE,EAAW,QAAEC,IAAM,UAAIC,WAAWpC,EAAI,EAAG,EAAG,EAAG,GAC/CgC,GAwBP,EAAAK,kBArBJ,SAA2BrC,GACvB,IACM8B,EA9EN,ugCA8E2BC,QAAQ,uBAAwBH,GAErDI,EAAiB,IAAI,UAAOhC,EAHViC,iLAGuBH,GAE/C,OADAE,EAAOE,EAAW,QAAEC,IAAM,UAAIC,WAAWpC,EAAI,EAAG,EAAG,EAAG,GAC/CgC,GAgBP,EAAAM,mBAbJ,SAA4BtC,GACxB,IACM8B,EAnDN,60BAmD4BC,QAAQ,uBAAwBH,GAEtDI,EAAiB,IAAI,UAAOhC,EAHViC,iLAGuBH,GAE/C,OADAE,EAAOE,EAAW,QAAEC,IAAM,UAAIC,WAAWpC,EAAI,EAAG,EAAG,EAAG,GAC/CgC,I,ogBCzMX,cAGA,SAASO,EAAevC,EAA2BwC,EAAgCvD,GACjFwD,MAAM,uBA+FR,IAAMC,EAAQ,CACZ,MAAQ,CAAEC,IAAK,aAAcC,OAnF/B,SAA4B5C,EAA2BwC,EAAgCvD,GACrFe,EAAG6C,WAAWL,EAAUvD,KAmFxB,MAAQ,CAAE0D,IAAK,aAAcC,OAhF/B,SAA4B5C,EAA2BwC,EAAgCvD,GACrFe,EAAG8C,WAAWN,EAAUvD,KAgFxB,MAAQ,CAAE0D,IAAK,aAAcC,OA7E/B,SAA4B5C,EAA2BwC,EAAgCvD,GACrFe,EAAG+C,WAAWP,EAAUvD,KA6ExB,MAAQ,CAAE0D,IAAK,WAAYC,OAhE7B,SAA0B5C,EAA2BwC,EAAgCvD,GACnFe,EAAGgD,WAAWR,EAAUvD,KAgExB,MAAQ,CAAE0D,IAAK,WAAYC,OA7D7B,SAA0B5C,EAA2BwC,EAAgCvD,GACnFe,EAAGiD,WAAWT,EAAUvD,KA6DxB,MAAQ,CAAE0D,IAAK,WAAYC,OA1D7B,SAA0B5C,EAA2BwC,EAAgCvD,GACnFe,EAAGkD,WAAWV,EAAUvD,KA0DxB,MAAQ,CAAE0D,IAAK,OAAQC,OAvDzB,SAAyB5C,EAA2BwC,EAAgCvD,GAClFe,EAAGmD,UAAUX,GAAWvD,KAuDxB,MAAQ,CAAE0D,IAAK,YAAaC,OApD9B,SAA2B5C,EAA2BwC,EAAgCvD,GACpFe,EAAGgD,WAAWR,EAAUvD,KAoDxB,MAAQ,CAAE0D,IAAK,YAAaC,OAjD9B,SAA2B5C,EAA2BwC,EAAgCvD,GACpFe,EAAGiD,WAAWT,EAAUvD,KAiDxB,MAAQ,CAAE0D,IAAK,YAAaC,OA9C9B,SAA2B5C,EAA2BwC,EAAgCvD,GACpFe,EAAGkD,WAAWV,EAAUvD,KA8CxB,MAAQ,CAAE0D,IAAK,aAAcC,OA3C/B,SAA8B5C,EAA2BwC,EAAgCvD,GACvFe,EAAGoD,iBAAiBZ,GAAU,EAAOvD,KA2CrC,MAAQ,CAAE0D,IAAK,aAAcC,OAxC/B,SAA8B5C,EAA2BwC,EAAgCvD,GACvFe,EAAGqD,iBAAiBb,GAAU,EAAOvD,KAwCrC,MAAQ,CAAE0D,IAAK,aAAcC,OArC/B,SAA8B5C,EAA2BwC,EAAgCvD,GACvFe,EAAGsD,iBAAiBd,GAAU,EAAOvD,KAqCrC,MAAQ,CAAE0D,IAAK,aAAcC,OAlC/B,SAAuB5C,EAA2BwC,EAAgCe,EAAgBtE,GAChGe,EAAGmD,UAAUX,EAAUe,GACvBvD,EAAGwD,cAAcxD,EAAG,UAAYuD,IAChCvD,EAAGyD,YAAYzD,EAAGe,WAAY9B,KAgC9B,MAAQ,CAAE0D,IAAK,eAAgBC,OA7BjC,SAAyB5C,EAA2BwC,EAAgCe,EAAgBtE,GAClGe,EAAGmD,UAAUX,EAAUe,GACvBvD,EAAGwD,cAAcxD,EAAG,UAAYuD,IAChCvD,EAAGyD,YAAYzD,EAAG0D,iBAAkBzE,KA2BpC,KAAQ,CAAE0D,IAAK,OAAQC,OAAQL,GAC/B,KAAQ,CAAEI,IAAK,gBAAiBC,OAAQL,GACxC,KAAQ,CAAEI,IAAK,QAASC,OAAQL,GAChC,KAAQ,CAAEI,IAAK,iBAAkBC,OAAQL,GACzC,KAAQ,CAAEI,IAAK,MAAOC,OAxFxB,SAAwB5C,EAA2BwC,EAAgCvD,GAC7E0E,MAAMC,QAAQ3E,GAChBe,EAAG6D,WAAWrB,EAAUvD,KAuF1B,KAAQ,CAAE0D,IAAK,eAAgBC,OAAQL,GACvC,KAAQ,CAAEI,IAAK,QAASC,OAhH1B,SAA0B5C,EAA2BwC,EAAgCvD,GAC/E0E,MAAMC,QAAQ3E,GAChBe,EAAG8D,WAAWtB,EAAUvD,GAExBe,EAAG+D,UAAUvB,EAAUvD,MA6H3B,cAQE,WAAYe,EAA2BgE,EAAsBC,GAA7D,WACE,SAASC,EAAaC,EAAcC,GAClC,IAAMpC,EAAShC,EAAGkE,aAAaC,GAK/B,OAJAnE,EAAGqE,aAAarC,EAAQoC,GACxBpE,EAAGsE,cAActC,GAEDhC,EAAGuE,mBAAmBvC,EAAQhC,EAAGwE,gBAO1CxC,GALLyC,QAAQC,IAAI1E,EAAG2E,iBAAiB3C,IAChChC,EAAG4E,aAAa5C,GACT,OAMX,cAAMhC,IAAG,MAEJM,GAAK,KACV,EAAKuE,OAAS,EACd,EAAKC,OAAS,EAEd,IAAMC,EAAeb,EAAalE,EAAGgF,cAAehB,GAC9CiB,EAAiBf,EAAalE,EAAGkF,gBAAiBjB,GAElD3D,EAAKN,EAAGmF,gB,OACdnF,EAAGoF,aAAa9E,EAAIyE,GACpB/E,EAAGoF,aAAa9E,EAAI2E,GACpBjF,EAAGqF,YAAY/E,GAECN,EAAGsF,oBAAoBhF,EAAIN,EAAGuF,cAK5C,EAAKjF,GAAKA,EAEV,EAAKkF,kBALLf,QAAQC,IAAI1E,EAAGyF,kBAAkBnF,IACjCN,EAAG0F,cAAcpF,I,EAgFvB,OAzH4B,OAiDnB,YAAAmB,gBAAP,WACE,YAAMzB,GAAE,WAAG0F,cAAczF,KAAKK,IAC9BL,KAAKK,GAAK,MAGJ,YAAAkF,cAAR,WACE,IAAMxF,EAAK,YAAMA,GAAE,WAEnBC,KAAK4E,OAAS7E,EAAGsF,oBAAoBrF,KAAKK,GAAIN,EAAG2F,iBACjD1F,KAAK2F,EAAI,GACT,IAAK,IAAI5H,EAAI,EAAGA,EAAIiC,KAAK4E,SAAU7G,EAAG,CACpC,IAAM6H,EAAU7F,EAAG8F,iBAAiB7F,KAAKK,GAAItC,GACvC,EAAO6H,EAAQtH,KAErB0B,KAAK2F,EAAE,GAAQ,CACb3G,MAAO,KACP8G,IAAK/F,EAAGgG,mBAAmB/F,KAAKK,GAAI,GACpC2F,KAAMJ,EAAQI,KACd9B,KAAM0B,EAAQ1B,MAIlBlE,KAAK6E,OAAS9E,EAAGsF,oBAAoBrF,KAAKK,GAAIN,EAAGkG,mBACjDjG,KAAKiC,EAAI,GACT,IAASlE,EAAI,EAAGA,EAAIiC,KAAK6E,SAAU9G,EAAG,CACpC,IAAMmI,EAAYnG,EAAGoG,gBAAgBnG,KAAKK,GAAItC,GACxC,EAAOmI,EAAU5H,KAEvB0B,KAAKiC,EAAE,GAAQ,CACbC,IAAK,KACL4D,IAAK/F,EAAGqG,kBAAkBpG,KAAKK,GAAI,GACnC2F,KAAME,EAAUF,KAChB9B,KAAMgC,EAAUhC,QAKf,YAAAmC,IAAP,WACE,YAAMtG,GAAE,WAAGuG,WAAWtG,KAAKK,KAGtB,YAAAkG,aAAP,WACE,IAAMxG,EAA4B,YAAMA,GAAE,WACtCyG,EAA4B,EAEhC,IAAK,IAAIC,KAASzG,KAAK2F,EAAG,CACxB,IAAMC,EAAU5F,KAAK2F,EAAEc,GACvB,GAAsB,OAAlBb,EAAQ5G,MACV,GAAqB,QAAjB4G,EAAQ1B,MAAoC,QAAjB0B,EAAQ1B,KAAiB,CACtD,IAAMZ,EAAiBkD,EACvB/D,EAAMmD,EAAQ1B,MAAMvB,OAAO5C,EAAI6F,EAAQE,IAAKxC,EAAQsC,EAAQ5G,OAC5DwH,SAEA/D,EAAMmD,EAAQ1B,MAAMvB,OAAO5C,EAAI6F,EAAQE,IAAKF,EAAQ5G,SAMrD,YAAA0H,eAAP,WACE,IAAK,IAAIC,KAAS3G,KAAKiC,EAAG,CACxB,IAAMiE,EAAYlG,KAAKiC,EAAE0E,GACH,OAAlBT,EAAUhE,KACZgE,EAAUhE,IAAI3C,KAAK2G,EAAUJ,OAK5B,YAAAc,0BAAP,WACE5G,KAAKuG,eACLvG,KAAK0G,kBAET,EAzHA,CAA4B,WA2H5B,UAAeG,G,shBCrQf,IAEA,cAQE,WAAY9G,EAA2B+G,EAAYd,EAAc9B,GAAjE,MACE,YAAMnE,IAAG,K,OAET,EAAKM,GAAKN,EAAGgH,eACbhH,EAAGiH,WAAWjH,EAAGkH,aAAc,EAAK5G,IACpCN,EAAGmH,WAAWnH,EAAGkH,aAAcH,EAAO/G,EAAGoH,aACzCpH,EAAGiH,WAAWjH,EAAGkH,aAAc,MAE/B,EAAKjB,KAAOA,EACZ,EAAK9B,KAAOA,EACZ,EAAKkD,WAAY,EACjB,EAAKC,OAAS,EACd,EAAKC,OAAS,E,EA0BlB,OA9CkB,OAuBT,YAAA9F,gBAAP,WACExB,KAAKD,KAAKwH,aAAavH,KAAKK,IAC5BL,KAAKK,GAAK,MAGE,EAAA8B,WAAd,SAAyBpC,EAA2ByH,EAAcC,EAAcC,EAAcC,GAQ5F,OAAO,IAAIzF,EAAInC,EAAI,IAAI6H,aAPZ,CACTJ,EAAMC,EACNC,EAAMD,EACND,EAAMG,EACND,EAAMC,IAGmC,EAAG5H,EAAG8H,QAG5C,YAAAtI,KAAP,SAAYgD,GACV,IAAMxC,EAAK,YAAMA,GAAE,WAEnBA,EAAG+H,wBAAwBvF,GAC3BxC,EAAGiH,WAAWjH,EAAGkH,aAAcjH,KAAKK,IACpCN,EAAGgI,oBAAoBxF,EAAUvC,KAAKgG,KAAMhG,KAAKkE,KAAMlE,KAAKoH,UAAWpH,KAAKqH,OAAQrH,KAAKsH,SAE7F,EA9CA,CAFA,QAEkB,SAgDlB,UAAepF,G,ogBClDf,IAIA,cASI,WAAYnC,G,OACR,YAAMA,IAAG,KAyEjB,OAnF8B,OAanB,YAAAyB,gBAAP,aAeA,sBAAI,uBAAQ,C,IAIZ,WACI,OAAOxB,KAAKgI,e,IALhB,SAAaC,GACTjI,KAAKgI,cAAgBC,EACrBjI,KAAKkI,kB,gCAMT,sBAAI,uBAAQ,C,IAIZ,WACI,OAAOlI,KAAKmI,e,IALhB,SAAaF,GACTjI,KAAKmI,cAAgBF,EACrBjI,KAAKoI,kB,gCAMT,sBAAI,sBAAO,C,IAIX,WACI,OAAOpI,KAAKqI,a,IALhB,SAAYJ,GACRjI,KAAKqI,YAAcJ,EACnBjI,KAAKsI,iB,gCAMT,sBAAI,wBAAS,C,IAIb,WACI,OAAOtI,KAAKuI,Y,IALhB,SAActG,GACVjC,KAAKuI,WAAatG,EAClBjC,KAAKwI,mB,gCAMT,sBAAI,yBAAU,C,IAId,WACI,OAAOxI,KAAKyI,a,IALhB,SAAepK,GACX2B,KAAKyI,YAAcpK,EACnB2B,KAAK0I,oB,gCAMT,sBAAI,sBAAO,C,IAIX,WACI,OAAO1I,KAAK2I,U,IALhB,SAAYnK,GACRwB,KAAK2I,SAAWnK,EAChBwB,KAAK4I,iB,gCAMT,sBAAI,kBAAG,C,IAIP,WACI,OAAO5I,KAAK6I,M,IALhB,SAAQC,GACJ9I,KAAK6I,KAAOC,EACZ9I,KAAK+I,a,gCAKb,EAnFA,CAJA,QAI8B,SAqF9B,UAAeC,G,2rBCzFf,cACA,UACA,UAEA,WACA,WACA,WACA,WAEA,KA6BA,WACI,IACMjJ,EA5BV,SAAgBkJ,EAA2BC,GACvC,SAASC,EAASC,GACdC,KAAKC,SAASC,gBAAgB,gBAAiBH,GAGnD,IAAIrJ,EAA4BkJ,EAAOO,WAAW,QAASN,GAC3D,IAAKnJ,EAAI,CAEL,KADAA,EAAKkJ,EAAOO,WAAW,qBAAsBN,IAGzC,OADAC,EAAS,0DACF,KAEXA,EAAS,qGAWb,OAPApJ,EAAG0J,QAAQ1J,EAAG2J,WACd3J,EAAG0J,QAAQ1J,EAAG4J,YACd5J,EAAG0J,QAAQ1J,EAAG6J,OACd7J,EAAG8J,WAAW,EAAG,EAAG,EAAG,GAEvBC,EAAMC,aAAahK,GAAI,GAEhBA,EAK2BiK,CADAX,KAAKY,OAAOC,YACG,IACjD,GAAKnK,EAAL,CAGA,IAAMoK,EAAmB,SAACC,GACtBf,KAAKY,OAAOI,qBAAqBC,MAAMC,WAAaH,EAAa,UAAY,QAEjFf,KAAKY,OAAOO,UAAUC,iBAAiBC,KAAKP,GAC5CA,EAAiBd,KAAKY,OAAOU,gBAE7B,IACMC,EAAe,IAAI,UAAM7K,EADlB,SAEP8K,EAA6B,IAAI,UAAa9K,EAAI,IAAK,eACvD+K,EAAqB,IAAI,UAAS/K,EAAI8K,GACtCE,EAAqB,IAAI,UAAShL,EAAI8K,GAE5CG,EAASzL,KAAKqL,EAAOE,EAAUC,GAE/B,IAAIE,EAAiBF,EACrBC,EAASE,qBACL,WAAQD,EAASH,KACjB,WAAQG,EAASF,KAGrB,IAAII,EAAqB,EAIzBC,aAHsB,WAClB/B,KAAKY,OAAOoB,iBAAiB,MAAOF,EAAWG,QAAQ,MAEhC,KAE3B,IAEIC,EAAiB,EACjBC,EAAgB,EA4BpBC,uBA3BA,SAASC,EAASC,GAEdR,EAAa,IADbQ,GAAQ,MACiBH,GACzBA,EAAgBG,EAEZA,EAAOJ,EARM,EADL,KAURA,EAAiBI,EAGjBV,EAAOW,SAAShB,GAChBA,EAAMiB,OAAO,EAAI,KAGrB/B,EAAMC,aAAahK,GAAI,GAGnBkL,EAAOa,UACPjB,EAAaiB,SAASC,QAAQnB,EAAOK,EAAOe,UAAWf,EAAOgB,WAAYhB,EAAOiB,KAGrF,UAAI/K,YAAYpB,GAChBA,EAAGoM,MAAMpM,EAAGqM,iBAAmBrM,EAAGsM,kBAClCpB,EAAOqB,QAAQ1B,EAAOC,GAEtBY,sBAAsBC,OAM9Ba,I,oGC5FS,EAAAxC,aAZT,SAAsBhK,EAA2ByM,QAAA,IAAAA,OAAA,GAC7C,IAAMC,EAAmB,EAAUC,OAAOC,iBAAmB,EACvD1D,EAASlJ,EAAGkJ,OAEZ9I,EAAgByM,KAAKC,MAAM5D,EAAO6D,YAAcL,GAChDrM,EAAiBwM,KAAKC,MAAM5D,EAAO8D,aAAeN,GACpDxD,EAAO9I,OAASA,GAAS8I,EAAO7I,QAAUA,IAC1C6I,EAAO9I,MAAQA,EACf8I,EAAO7I,OAASA,K,6hCCRxB,cACA,UAEA,UAEA,cAoBI,WAAYL,EAA2BiN,EAAWC,GAAlD,MACI,YAAMlN,IAAG,K,OAET,EAAKmN,KAAO,IAAI,UAAInN,EAAIiN,EAAGC,GAC3B,EAAKE,aAAeC,EAAcxL,iBAAiB7B,GACnD,EAAKsN,cAAgBD,EAAchL,kBAAkBrC,GACrD,EAAKuN,eAAiBF,EAAc/K,mBAAmBtC,GAEvD,EAAKwN,eAAiB,GACtB,EAAKC,gBAAkB,GACvB,EAAKC,WAAa,KAElB,EAAKC,MAAO,EAEZ,EAAKC,MAAMX,EAAGC,G,EA8LtB,OAhOoB,OAqCT,YAAAzL,gBAAP,WACQxB,KAAKkN,MACLlN,KAAKkN,KAAK1L,kBAGdxB,KAAK4N,eACL5N,KAAK6N,eAGD,YAAAD,aAAR,WACI,IAAM7N,EAAK,YAAMA,GAAE,WAEfC,KAAK8N,aACL/N,EAAGgO,cAAc/N,KAAK8N,aAEtB9N,KAAKgO,iBACLjO,EAAGgO,cAAc/N,KAAKgO,eAAe,IACrCjO,EAAGgO,cAAc/N,KAAKgO,eAAe,MAIrC,YAAAH,YAAR,WACQ7N,KAAKmN,cACLnN,KAAKmN,aAAa3L,kBAGlBxB,KAAKqN,eACLrN,KAAKqN,cAAc7L,mBAIpB,YAAAqK,OAAP,SAAcoC,GACV,IAAMlO,EAAKC,KAAKD,KAEhBA,EAAG0J,QAAQ1J,EAAG2J,WACd3J,EAAG0J,QAAQ1J,EAAG4J,YAEV3J,KAAK0N,MAAQd,KAAKsB,SAAW,IAC7BlO,KAAKmO,MAAMvB,KAAKsB,SAAWlO,KAAKG,MAAOyM,KAAKsB,SAAWlO,KAAKI,OAAQ,GAGxE,IAAMgO,EAAepO,KAAKqN,cAE1Be,EAAazI,EAAc,WAAE3G,MAAQgB,KAAKqO,cAC1CD,EAAazI,EAAO,IAAE3G,MAAa,GAALiP,EAE9BjO,KAAKkN,KAAK3N,KAAK,CAACS,KAAKsO,gBACrBF,EAAa/H,MACb+H,EAAaxH,4BACb7G,EAAGwO,WAAWxO,EAAGyO,eAAgB,EAAG,GAEpCxO,KAAKyO,mBAELzO,KAAK0O,kBAGD,YAAAA,eAAR,WACI,IAAM3O,EAAKC,KAAKD,KACVgC,EAAS/B,KAAKsN,eAEpBvL,EAAO4D,EAAU,OAAE3G,MAAQgB,KAAKqO,cAEhCrO,KAAKkN,KAAK3N,KAAK,CAACS,KAAK8N,cACrB/L,EAAOsE,MACPtE,EAAO6E,4BACP7G,EAAGwO,WAAWxO,EAAGyO,eAAgB,EAAG,IAGjC,YAAAL,MAAP,SAAaQ,EAAgBC,EAAgBC,GACzC,IAAM9O,EAAKC,KAAKD,KACV+O,EAAc9O,KAAKmN,aAEzB2B,EAAYnJ,EAAU,OAAE3G,MAAQgB,KAAKqO,cACrCS,EAAYnJ,EAAW,QAAE3G,MAAQ,CAAC2P,EAAS3O,KAAKG,MAAOyO,EAAS5O,KAAKI,QACrE0O,EAAYnJ,EAAS,MAAE3G,MAAQ,CAAC6P,EAAS7O,KAAKG,MAAO0O,EAAS7O,KAAKI,QAEnEJ,KAAKkN,KAAK3N,KAAK,CAACS,KAAKsO,gBACrBQ,EAAYzI,MACZyI,EAAYlI,4BACZ7G,EAAGwO,WAAWxO,EAAGyO,eAAgB,EAAG,GAEpCxO,KAAKyO,mBACLzO,KAAK0O,kBAGT,sBAAI,oBAAK,C,IAAT,WACI,OAAO1O,KAAK+O,Q,gCAGhB,sBAAI,qBAAM,C,IAAV,WACI,OAAO/O,KAAKgP,S,gCAGhB,sBAAI,6BAAc,C,IAalB,WACI,OAAOhP,KAAKiP,iB,IAdhB,SAAmB7Q,GACf4B,KAAKiP,gBAAkB7Q,EACvB4B,KAAKqN,cAAc1H,EAAM,GAAE3G,MAAQZ,G,gCAEvC,sBAAI,8BAAe,C,IAYnB,WACI,OAAO4B,KAAKkP,kB,IAbhB,SAAoBC,GAChBnP,KAAKkP,iBAAmBC,EACxBnP,KAAKqN,cAAc1H,EAAM,GAAE3G,MAAQmQ,G,gCAEvC,sBAAI,yBAAU,C,IAWd,WACI,OAAOnP,KAAKoP,a,IAZhB,SAAeC,GACXrP,KAAKoP,YAAcC,EACnBrP,KAAKqN,cAAc1H,EAAM,GAAE3G,MAAQqQ,G,gCAavC,sBAAI,wBAAS,C,IAAb,WACI,OAAOrP,KAAKgO,eAAehO,KAAKsP,a,gCAGpC,sBAAI,wBAAS,C,IAAb,WACI,OAAOtP,KAAK8N,a,gCAGhB,sBAAY,4BAAa,C,IAAzB,WACI,OAAO9N,KAAKgO,eAAehO,KAAKsP,a,gCAGpC,sBAAY,4BAAa,C,IAAzB,WACI,OAAOtP,KAAKgO,gBAAgBhO,KAAKsP,WAAa,GAAK,I,gCAG/C,YAAAb,iBAAR,WACIzO,KAAKsP,YAActP,KAAKsP,WAAa,GAAK,GAGvC,YAAA3B,MAAP,SAAaX,EAAWC,GACpBjN,KAAK4N,eAEL,IAAM7N,EAAK,YAAMA,GAAE,WAEnBC,KAAK+O,OAAS/B,EACdhN,KAAKgP,QAAU/B,EACfjN,KAAKkN,KAAK/M,MAAQ6M,EAClBhN,KAAKkN,KAAK9M,OAAS6M,EAEnBjN,KAAKqN,cAAc1H,EAAc,WAAE3G,MAAQ,CAAC,EAAIgO,EAAG,EAAIC,GACvDjN,KAAKsN,eAAe3H,EAAc,WAAE3G,MAAQ,CAAC,EAAIgO,EAAG,EAAIC,GAGxD,IADA,IAAMsC,EAAuB,IAAI7L,MAAM,EAAIsJ,EAAIC,GACtClP,EAAI,EAAGA,EAAIwR,EAAW3O,SAAW7C,EACtCwR,EAAWxR,GAAK,IAEpB,IAAMyR,EAAW,IAAIC,WAAWF,GAE1BG,EAAO3P,EAAG4P,OACVC,EAAS7P,EAAG8P,OACdC,EAA2B,GAC/B,IAAS/R,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIgS,EAAUhQ,EAAGiQ,gBACjBjQ,EAAGyD,YAAYzD,EAAGe,WAAYiP,GAC9BhQ,EAAGkQ,WAAWlQ,EAAGe,WAAY,EAAGf,EAAGmQ,KAAMlD,EAAGC,EAAG,EAC3ClN,EAAGmQ,KAAMnQ,EAAGoQ,cAAeX,GAC/BM,EAASpF,KAAKqF,GAGVA,EAAUhQ,EAAGiQ,gBACjBjQ,EAAGyD,YAAYzD,EAAGe,WAAYiP,GAC9BhQ,EAAGkQ,WAAWlQ,EAAGe,WAAY,EAAGf,EAAGqQ,IAAKpD,EAAGC,EAAG,EAC1ClN,EAAGqQ,IAAKrQ,EAAGoQ,cAAeX,GAC9BM,EAASpF,KAAKqF,GAGlB,IAAe,UAAAD,EAAA,eAAU,CAApB,IAAIO,EAAE,KACPtQ,EAAGyD,YAAYzD,EAAGe,WAAYuP,GAC9BtQ,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAGwQ,mBAAoBX,GACvD7P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAGyQ,mBAAoBZ,GACvD7P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG0Q,eAAgBf,GACnD3P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG2Q,eAAgBhB,GAGvD1P,KAAK8N,YAAcgC,EAAS,GAC5B9P,KAAKgO,eAAiB,CAAC8B,EAAS,GAAIA,EAAS,IAC7C9P,KAAKsP,WAAa,EAElBtP,KAAK0O,kBAEb,EAhOA,CAAoB,WAkOpB,UAAeiC,G,6hCCvOf,cAKA,UACA,WACA,WAEA,KAEA,kBAII,WAAY5Q,EAA2B6Q,GAAvC,MACI,YAAM7Q,IAAG,K,OAET,EAAK8Q,eAAiBC,EAAeC,mBAAmBhR,GACxD,EAAK8Q,eAAelL,EAAgB,aAAE3G,MAAQ4R,EAAOI,YACrD,EAAKH,eAAelL,EAAa,UAAE3G,MAAQ4R,EAAO9E,SAASiE,QAE3D,EAAKkB,UAAY,IAAI,U,EA+E7B,OA1FuB,OAcZ,YAAAzP,gBAAP,WACIxB,KAAK6Q,eAAerP,mBAGhB,YAAA0P,eAAR,WACI,IAAMnR,EAAK,YAAMA,GAAE,WACboR,EAAOvE,KAAKwE,IAAIrR,EAAGqB,mBAAoBrB,EAAGsB,qBAEhDrB,KAAKiR,UAAU3P,KAAO,IAAOvB,EAAGqB,mBAAqB+P,GACrDnR,KAAKiR,UAAU1P,MAAQ,IAAOxB,EAAGsB,oBAAsB8P,GACvDnR,KAAKiR,UAAU9Q,MAAQgR,EACvBnR,KAAKiR,UAAU7Q,OAAS+Q,GAGrB,YAAA7E,QAAP,SAAe1B,EAAcgG,GACzB,IAAM7Q,EAAK,YAAMA,GAAE,WAEnBC,KAAKkR,iBAELnR,EAAG0J,QAAQ1J,EAAG2J,WACd3J,EAAG0J,QAAQ1J,EAAG4J,YAEd,IAAM0H,EAAgBrR,KAAK6Q,eAE3B,UAAI1P,YAAYpB,EAAIC,KAAKiR,WAEzBI,EAAc1L,EAAU,OAAE3G,MAAQ4L,EAAM0G,UACxCD,EAAc1L,EAAY,SAAE3G,MAAQ4L,EAAM2G,UAE1CF,EAAchL,MACdgL,EAAczK,4BAEd7G,EAAGwO,WAAWxO,EAAGyO,eAAgB,EAAG,IAGjC,YAAA5C,SAAP,SAAgBhB,GACZ,GAAIvB,KAAKY,OAAOuH,cAAe,CAC3B,IAAMC,EAAapI,KAAKY,OAAOyH,UACzB7R,EAAIwJ,KAAKY,OAAO0H,mBACtB9R,EAAE,IAAM4R,EAAW,GACnB5R,EAAE,IAAM,EAAIA,EAAE,IAAM4R,EAAW,GAE/BzR,KAAKkR,iBACLrR,EAAE,IAAMA,EAAE,GAAKG,KAAKiR,UAAU3P,MAAQtB,KAAKiR,UAAU9Q,MACrDN,EAAE,IAAMA,EAAE,GAAKG,KAAKiR,UAAU1P,OAASvB,KAAKiR,UAAU7Q,OAEtDwK,EAAMuD,MAAMtO,EAAE,GAAK+K,EAAMzK,MAAON,EAAE,GAAK+K,EAAMxK,OAAQ,KAInD,YAAA8H,eAAV,WACIlI,KAAK6Q,eAAelL,EAAiB,cAAE3G,MAAQgB,KAAK4R,UAG9C,YAAAxJ,eAAV,WACIpI,KAAK6Q,eAAelL,EAAiB,cAAE3G,MAAQgB,KAAK8L,UAG9C,YAAAxD,cAAV,aAGU,YAAAE,gBAAV,WACIxI,KAAK6Q,eAAelL,EAAc,WAAE3G,MAAQgB,KAAKgM,WAG3C,YAAAtD,iBAAV,WACI1I,KAAK6Q,eAAelL,EAAe,YAAE3G,MAAQgB,KAAKiM,YAG5C,YAAArD,cAAV,WACI5I,KAAK6Q,eAAelL,EAAY,SAAE3G,MAAQgB,KAAK6R,SAGzC,YAAA9I,UAAV,WACI/I,KAAK6Q,eAAelL,EAAQ,KAAE3G,MAAQgB,KAAKkM,KAEnD,EA1FA,CAAuB,WA4FvB,UAAe4F,G,8ECvGf,mBAOA,UAAeC,G,8LCPf,cACA,UACA,OA2EI,EAAAhB,mBAVJ,SAA4BhR,GACxB,IACM8B,EAtDN,irDAsD4BC,QAAQ,uBAAwB,EAAAH,iBAEtDI,EAAiB,IAAI,UAAOhC,EAlElC,iLAkE+C8B,GAE/C,OADAE,EAAOE,EAAW,QAAEC,IAAM,UAAIC,WAAWpC,EAAI,EAAG,EAAG,EAAG,GAC/CgC,I,6hCCzEX,cAMA,WACA,WAEA,KAKA,kBAkBI,WAAYhC,EAA2B6Q,GAAvC,MACI,YAAM7Q,IAAG,KACHkJ,EAASlJ,EAAGkJ,OAElB,EAAK+I,SAAWC,KAAK5S,SACrB,EAAK6S,WAAaD,KAAK5S,SACvB4S,KAAKE,YAAY,EAAKH,SAAU,GAAI/I,EAAO6D,YAAc7D,EAAO8D,aAAc,GAAK,KAEnF,EAAKqF,QAAU,IAAI,UAAc,CAAC,EAAG,EAAG,EAAKnG,WAAa,IAAK,KAC/D,EAAKmG,QAAQC,MAAQ,EACrB,EAAKD,QAAQE,IAAM,GAEnB,EAAKC,gBAAkBC,KAAKC,WAAW,EAAG,GAAI,GAC9CD,KAAKpL,UAAU,EAAKmL,gBAAiB,EAAKA,iBAG1C,EAAKG,YADK,SAGV,EAAKC,OAGL,IADA,IACmB,MADH,CAAC,EAAKC,aAAc,EAAKC,gBACtB,eAAS,CAAvB,IAAI9Q,EAAM,KACXA,EAAO4D,EAAgB,aAAE3G,MAAQ4R,EAAOI,YACxCjP,EAAO4D,EAAa,UAAE3G,MAAQ4R,EAAO9E,SAASiE,QAC9ChO,EAAO4D,EAAa,UAAE3G,MAAQ,EAAKuT,gBAIvClJ,KAAKY,OAAOO,UAAUsI,UAAUpI,MAAK,SAACqI,EAAYC,GAC9C,EAAKZ,QAAQC,OAAS,QAAoBU,EAC1C,EAAKX,QAAQE,KAAO,EAAUU,EAC9B,EAAKZ,QAAQE,IAAM1F,KAAKwE,IAJM,IAIMxE,KAAKqG,IAJ9B,KAI0C,EAAKb,QAAQE,MAClE,EAAKY,qB,OAIT7J,KAAKY,OAAOO,UAAU2I,WAAWzI,MAAK,SAAC0I,GACnC,IAAI/U,EAAI,EAAK+T,QAAQiB,SAAW,GAAMD,EACtC/U,EAAIuO,KAAKwE,IAHmB,EAGNxE,KAAKqG,IAHf,KAG4B5U,IACxC,EAAK+T,QAAQiB,SAAWhV,EACxB,EAAK6U,qB,EA+QjB,OAzUuB,OA8DX,YAAAI,cAAR,WACE,IAAMrK,EAAS,YAAMlJ,GAAE,WAAGkJ,OACxBgJ,KAAKE,YAAYnS,KAAKgS,SAAU,GAAI/I,EAAO6D,YAAc7D,EAAO8D,aAAc,GAAK,MAG/E,YAAAmG,gBAAR,WACIlT,KAAKsT,gBACLrB,KAAKsB,SAASvT,KAAKkS,WAAYlS,KAAKgS,SAAUhS,KAAKoS,QAAQoB,aAGxD,YAAAd,YAAP,SAAmB1F,EAAWC,GAC1B,IAAMlN,EAAK,YAAMA,GAAE,WAEnBC,KAAKyT,WAAazG,EAClBhN,KAAK0T,YAAczG,EAQX,IAJJ,IAAM0G,EAAK3T,KAAKyT,WACVG,EAAK5T,KAAK0T,YAENG,EAAO,GACJC,EAAK,EAAGA,EAAKF,IAAME,EACxB,IAAK,IAAIC,EAAK,EAAGA,EAAKJ,IAAMI,EACxBF,EAAKnJ,KAAKqJ,GAAMJ,EAAK,IACrBE,EAAKnJ,KAAKoJ,GAAMF,EAAK,IAG7B,IAAM9M,EAAQ,IAAIc,aAAaiM,GAEzBxT,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGkH,aAAc5G,GAC/BN,EAAGmH,WAAWnH,EAAGkH,aAAcH,EAAO/G,EAAGoH,aACzCpH,EAAGiH,WAAWjH,EAAGkH,aAAc,MAC/BjH,KAAKgU,cAAgB3T,EAGrB,IAAM4T,EAAU,GAChB,IAASH,EAAK,EAAGA,EAAKF,EAAK,IAAKE,EAC5B,IAASC,EAAK,EAAGA,EAAKJ,EAAK,IAAKI,EAC5BE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,GACvBE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,EAAK,GAC5BE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,GAE7BE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,EAAK,GAC5BE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,EAAK,GAClCE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,GAI/BjN,EAAQ,IAAIoN,YAAYD,GAExB5T,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGoU,qBAAsB9T,GACvCN,EAAGmH,WAAWnH,EAAGoU,qBAAsBrN,EAAO/G,EAAGoH,aACjDpH,EAAGiH,WAAWjH,EAAGoU,qBAAsB,MACvCnU,KAAKoU,aAAe/T,GAKzB,YAAAmB,gBAAP,WACI,IAAMzB,EAAK,YAAMA,GAAE,WAEnBA,EAAGwH,aAAavH,KAAKqU,WACrBtU,EAAGwH,aAAavH,KAAKsU,UACrBtU,KAAK4S,aAAapR,kBAClBxB,KAAK6S,eAAerR,kBAEpBzB,EAAGwH,aAAavH,KAAKgU,eACrBjU,EAAGwH,aAAavH,KAAKoU,eAGlB,YAAA9H,QAAP,SAAe1B,EAAcgG,GACzB,IAAM7Q,EAAK,YAAMA,GAAE,WAGnBC,KAAK4S,aAAajN,EAAW,QAAE3G,MAAQgB,KAAKoS,QAAQmC,OACpDvU,KAAK6S,eAAelN,EAAW,QAAE3G,MAAQgB,KAAKoS,QAAQmC,OAEtDvU,KAAKkT,kBAGLnT,EAAGyU,OAAOzU,EAAG2J,WACb3J,EAAGyU,OAAOzU,EAAG4J,YAEb3J,KAAKyU,aAAa7J,GAClB5K,KAAK0U,eAAe9J,IAGjB,YAAAgB,SAAP,SAAgBhB,KAGR,YAAA6J,aAAR,SAAqB7J,GACjB,IAAM7K,EAAK,YAAMA,GAAE,WACbgC,EAAS/B,KAAK4S,aAEpB7Q,EAAO4D,EAAU,OAAE3G,MAAQ4L,EAAM0G,UAEjCvP,EAAOsE,MACPtE,EAAOwE,eAIPxG,EAAG+H,wBAFU,GAGb/H,EAAGiH,WAAWjH,EAAGkH,aAAcjH,KAAKqU,WACpCtU,EAAGgI,oBAJU,EAIgB,EAAGhI,EAAG8H,OAAO,EAAO,EAAG,GAEpD9H,EAAG+H,wBALU,GAMb/H,EAAGiH,WAAWjH,EAAGkH,aAAcjH,KAAKsU,UACpCvU,EAAGgI,oBAPU,EAOgB,EAAGhI,EAAG8H,OAAO,EAAO,EAAG,GAEpD9H,EAAGwO,WAAWxO,EAAG4U,UAAW,EAAG,IAE/B5U,EAAG6U,yBAXU,GAYb7U,EAAG6U,yBAbU,IAgBT,YAAAF,eAAR,SAAuB9J,GACnB,IAAM7K,EAAK,YAAMA,GAAE,WACbgC,EAAS/B,KAAK6S,eAEpB9Q,EAAO4D,EAAU,OAAE3G,MAAQ4L,EAAM0G,UACjCvP,EAAO4D,EAAY,SAAE3G,MAAQ4L,EAAM2G,UAEnCxP,EAAOsE,MACPtE,EAAOwE,eAEPxG,EAAG+H,wBAAwB,GAC3B/H,EAAGiH,WAAWjH,EAAGkH,aAAcjH,KAAKgU,eACpCjU,EAAGgI,oBAAoB,EAAG,EAAGhI,EAAG8H,OAAO,EAAO,EAAG,GAEjD9H,EAAGiH,WAAWjH,EAAGoU,qBAAsBnU,KAAKoU,cAE5C,IAAMS,EAAc,GAAK7U,KAAKyT,WAAa,IAAMzT,KAAK0T,YAAc,GACpE3T,EAAG+U,aAAa/U,EAAG4U,UAAW,EAAIE,EAAa9U,EAAGgV,eAAgB,GAElEhV,EAAGiH,WAAWjH,EAAGoU,qBAAsB,MACvCpU,EAAGiH,WAAWjH,EAAGkH,aAAc,MAC/BlH,EAAG6U,yBAAyB,IAGxB,YAAAjC,KAAR,WACI,IAAM5S,EAAK,YAAMA,GAAE,WAEnBC,KAAK4S,aAAe9B,EAAekE,iBAAiBjV,GACpDC,KAAK4S,aAAajN,EAAc,WAAE3G,MAAQgB,KAAKkS,WAE/ClS,KAAK6S,eAAiB/B,EAAemE,mBAAmBlV,GACxDC,KAAK6S,eAAelN,EAAc,WAAE3G,MAAQgB,KAAKkS,WAI7C,IA6BM7R,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGkH,aAAc5G,GAC/BN,EAAGmH,WAAWnH,EAAGkH,aAAc,IAAIW,aA/BtB,CACT,IAAM,GAAI,GACT,IAAK,GAAI,GACT,IAAK,GAAI,EACV,IAAM,GAAI,GACT,IAAK,GAAI,EACV,IAAM,GAAI,EAEV,GAAK,GAAK,EACV,IAAM,GAAI,EACV,IAAM,GAAI,EACV,GAAK,GAAK,EACV,IAAM,GAAI,EACV,GAAK,GAAK,EAEV,GAAK,GAAK,GACT,GAAI,GAAK,GACT,GAAI,GAAK,GACT,GAAI,GAAK,EACV,GAAK,GAAK,EACV,GAAK,GAAK,GAET,IAAK,GAAI,GACT,GAAI,GAAK,GACT,IAAK,GAAI,GACT,IAAK,GAAI,GACT,GAAI,GAAK,GACT,GAAI,GAAK,IAIyC7H,EAAGoH,aAC1DnH,KAAKqU,UAAYhU,EAiCXA,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGkH,aAAc5G,GAC/BN,EAAGmH,WAAWnH,EAAGkH,aAAc,IAAIW,aA/BtB,CACT,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,EAEJ,EAAI,EACJ,EAAI,EACJ,EAAI,EACJ,EAAI,EACJ,EAAI,EACJ,EAAI,EAEJ,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GAEF,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,IAI+C7H,EAAGoH,aAC1DnH,KAAKsU,SAAWjU,GAId,YAAA6H,eAAV,WACIlI,KAAK4S,aAAajN,EAAa,UAAE3G,MAAQgB,KAAK4R,SAC9C5R,KAAK6S,eAAelN,EAAa,UAAE3G,MAAQgB,KAAK4R,UAG1C,YAAAxJ,eAAV,WACIpI,KAAK4S,aAAajN,EAAiB,cAAE3G,MAAQgB,KAAK8L,SAClD9L,KAAK6S,eAAelN,EAAiB,cAAE3G,MAAQgB,KAAK8L,UAG9C,YAAAxD,cAAV,WACItI,KAAK4S,aAAajN,EAAY,SAAE3G,MAAQgB,KAAKkV,QAC7ClV,KAAK6S,eAAelN,EAAY,SAAE3G,MAAQgB,KAAKkV,SAGzC,YAAA1M,gBAAV,WACI,IAAMwD,EAAY,EAAIhM,KAAKgM,UAC3BhM,KAAK4S,aAAajN,EAAc,WAAE3G,MAAQgN,EAC1ChM,KAAK6S,eAAelN,EAAc,WAAE3G,MAAQgN,GAGtC,YAAAtD,iBAAV,WACI1I,KAAK4S,aAAajN,EAAe,YAAE3G,MAAQgB,KAAKiM,WAChDjM,KAAK6S,eAAelN,EAAe,YAAE3G,MAAQgB,KAAKiM,WAClDjM,KAAKoS,QAAQ+C,WAAa,CAAC,EAAG,EAAGnV,KAAKiM,WAAa,IACnDjM,KAAKkT,mBAGC,YAAAtK,cAAV,WACI5I,KAAK4S,aAAajN,EAAY,SAAE3G,MAAQgB,KAAK6R,QAC7C7R,KAAK6S,eAAelN,EAAY,SAAE3G,MAAQgB,KAAK6R,SAGzC,YAAA9I,UAAV,WACI/I,KAAK4S,aAAajN,EAAQ,KAAE3G,MAAQgB,KAAKkM,IACzClM,KAAK6S,eAAelN,EAAQ,KAAE3G,MAAQgB,KAAKkM,IAE3C,IAAIkJ,GAAM,EAAIpV,KAAKkM,MAAQ,EAAIlM,KAAKkM,KACpCkJ,GAAUA,EACVpV,KAAK4S,aAAajN,EAAO,IAAE3G,MAAQoW,EACnCpV,KAAK6S,eAAelN,EAAO,IAAE3G,MAAQoW,GAE7C,EAzUA,CAAuB,WA2UvB,UAAeC,G,iNCzVf,cACA,OAEMC,EACF,m/FA+OA,EAAAN,iBAhBJ,SAA0BjV,GACtB,IACI8B,EAxFJ,gxBAwFwBC,QAAQ,uBAAwB,EAAAH,iBAGxD,OAFAE,EAAUA,EAAQC,QAAQ,sBAAuBwT,GAE1C,IAAI,UAAOvV,EArHlB,0lBAqH+B8B,IAY/B,EAAAoT,mBATJ,SAA4BlV,GACxB,IAAMwV,EA1DN,qsBA0D4BzT,QAAQ,uBAAwB,EAAAH,iBACxDE,EA7BJ,oVA6B0BC,QAAQ,sBAAuBwT,GAEzD,OAAO,IAAI,UAAOvV,EAAIwV,EAAS1T,K,8EC7OnC,iBASI,WAAYsT,EAAsB9B,GAC9BrT,KAAKwV,OAASL,EACdnV,KAAKyV,UAAYpC,EACjBrT,KAAK0V,OAAS,EACd1V,KAAK2V,KAAO,IAEZ3V,KAAK4V,QAAU,CAAC,EAAG,EAAG,GACtB5V,KAAK6V,YAAc5D,KAAK5S,SACxBW,KAAK8V,YAyDb,OAtDI,sBAAW,yBAAU,C,IAArB,WACI,OAAO9V,KAAKwV,Q,IAehB,SAAsBO,GAClB/V,KAAKwV,OAASO,EACd/V,KAAK8V,a,gCAdT,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO9V,KAAKyV,W,IAgBhB,SAAoBO,GAChBhW,KAAKyV,UAAYO,EACjBhW,KAAK8V,a,gCAfT,sBAAW,oBAAK,C,IAAhB,WACI,OAAO9V,KAAK0V,Q,IAiBhB,SAAiBO,GACbjW,KAAK0V,OAASO,EACdjW,KAAK8V,a,gCAhBT,sBAAW,kBAAG,C,IAAd,WACI,OAAO9V,KAAK2V,M,IAkBhB,SAAeO,GACXlW,KAAK2V,KAAOO,EACZlW,KAAK8V,a,gCAGT,sBAAW,qBAAM,C,IAAjB,WACI,OAAO9V,KAAK4V,S,gCAGhB,sBAAW,yBAAU,C,IAArB,WACI,OAAO5V,KAAK6V,a,gCAGR,YAAAC,UAAR,WACI,IAAMK,EAAMvJ,KAAKuJ,IACXC,EAAMxJ,KAAKwJ,IAEjBpW,KAAK4V,QAAQ,GAAK5V,KAAKmV,WAAW,GAAKnV,KAAKqT,UAAY8C,EAAInW,KAAKsS,KAAO8D,EAAIpW,KAAKqS,QACjFrS,KAAK4V,QAAQ,GAAK5V,KAAKmV,WAAW,GAAKnV,KAAKqT,UAAY8C,EAAInW,KAAKsS,KAAO6D,EAAInW,KAAKqS,QACjFrS,KAAK4V,QAAQ,GAAK5V,KAAKmV,WAAW,GAAKnV,KAAKqT,SAAY+C,EAAIpW,KAAKsS,KAEjEtS,KAAK6V,YAAc5D,KAAKoE,OAAOrW,KAAK6V,YAAa7V,KAAKuU,OAAQvU,KAAKmV,WAAY,CAAC,EAAG,EAAG,KAE9F,EA1EA,GA4EA,UAAemB,G,ogBC9Ef,cACA,WAEA,cAKI,WAAYvW,EAA2BwW,EAAqBC,GAA5D,WACI,SAASC,EAAWjX,GAChB,MAAiB,iBAANA,EACA,eAEJA,GAAuB,IAAjBA,EAAKA,EAAI,IAG1B,cAAMO,IAAG,MAGJ2W,UAAY,IAAI,UAAS3W,EAAIwW,EAAaA,GAG/C,EAAKI,aAAe5W,EAAGiQ,gBACvBjQ,EAAGyD,YAAYzD,EAAGe,WAAY,EAAK6V,cACnC5W,EAAGkQ,WAAWlQ,EAAGe,WAAY,EAAGf,EAAGmQ,KAAM,EAAG,EAAG,EAAGnQ,EAAGmQ,KAAMnQ,EAAGoQ,cAAe,IAAIV,WAAW,CAAC,EAAG,EAAG,IAAK,OAExG,IAAMmH,EAAU,IAAIC,MACd7F,EAAc,EAAK2F,a,OACzBC,EAAQE,OAAS,WACb/W,EAAGyD,YAAYzD,EAAGe,WAAYkQ,GAC9BjR,EAAGkQ,WAAWlQ,EAAGe,WAAY,EAAGf,EAAGmQ,KAAMnQ,EAAGmQ,KAAMnQ,EAAGoQ,cAAeyG,GAEhEH,EAAWG,EAAQzW,QAAUsW,EAAWG,EAAQxW,QAChDL,EAAGgX,eAAehX,EAAGe,aAErBf,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG0Q,eAAgB1Q,EAAG4P,QACtD5P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG2Q,eAAgB3Q,EAAG4P,QACtD5P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAGyQ,mBAAoBzQ,EAAG8P,UAGlE+G,EAAQI,IAAMR,E,EAoBtB,OAzD2B,OAwChB,YAAAhV,gBAAP,WACI,IAAMzB,EAAK,YAAMA,GAAE,WAEnBC,KAAK0W,UAAUlV,kBACfxB,KAAK0W,UAAY,KAEjB3W,EAAGgO,cAAc/N,KAAK2W,cACtB3W,KAAK2W,aAAe,MAGxB,sBAAI,uBAAQ,C,IAAZ,WACI,OAAO3W,KAAK0W,W,gCAGhB,sBAAI,0BAAW,C,IAAf,WACI,OAAO1W,KAAK2W,c,gCAEpB,EAzDA,CAA2B,WA2D3B,UAAeM,G,6hCC9Df,cACA,UAGA,WAEA,cAiBI,WAAYlX,EAA2BiN,EAAWC,GAAlD,MACI,YAAMlN,IAAG,KAET,EAAKmX,WAA6D,OAAhDnX,EAAGoX,aAAa,4B,OAGlC,EAAK1D,WADK,IAEV,EAAKC,YAFK,IAIV,EAAK/F,MAAMX,EAAGC,G,EAqJtB,OA/KuB,OA6BZ,YAAAzL,gBAAP,WACI,IAAMzB,EAAK,YAAMA,GAAE,WAEfC,KAAKoX,SACLpX,KAAKoX,QAAQ5V,kBAEbxB,KAAKqX,UACLtX,EAAGgO,cAAc/N,KAAKqX,UAEtBrX,KAAKsX,MACLtX,KAAKsX,KAAK9V,kBAGVxB,KAAKqU,WACLtU,EAAGwH,aAAavH,KAAKqU,WAErBrU,KAAKuX,UACLxX,EAAGwH,aAAavH,KAAKuX,WAItB,YAAAxL,QAAP,SAAenB,EAAcoB,EAAmBC,EAAoBC,GAChE,GAAKlM,KAAKwX,UAAV,CAGA,IAAMzX,EAAK,YAAMA,GAAE,WACbgC,EAAS/B,KAAKoX,QAEpBrV,EAAO4D,EAAU,OAAE3G,MAAQ4L,EAAM0G,UACjCvP,EAAO4D,EAAY,SAAE3G,MAAQ4L,EAAM2G,UACnCxP,EAAO4D,EAAc,WAAE3G,MAAQ,GAAMgN,EACrCjK,EAAO4D,EAAe,YAAE3G,MAAQiN,EAChClK,EAAO4D,EAAQ,KAAE3G,MAAQkN,EAEzBlM,KAAKsX,KAAK/X,KAAK,CAACS,KAAKqX,WACrBtX,EAAGoM,MAAMpM,EAAGqM,kBAEZrK,EAAOsE,MACPtE,EAAOwE,eAEPxG,EAAG+H,wBAAwB,GAC3B/H,EAAGiH,WAAWjH,EAAGkH,aAAcjH,KAAKqU,WACpCtU,EAAGgI,oBAAoB,EAAG,EAAGhI,EAAG8H,OAAO,EAAO,EAAG,GAEjD9H,EAAGiH,WAAWjH,EAAGoU,qBAAsBnU,KAAKuX,UAE5C,IAAM1C,EAAc,GAAK7U,KAAKyT,WAAa,IAAMzT,KAAK0T,YAAc,GACpE3T,EAAG+U,aAAa/U,EAAG4U,UAAW,EAAIE,EAAa9U,EAAGgV,eAAgB,GAElEhV,EAAGiH,WAAWjH,EAAGoU,qBAAsB,MACvCpU,EAAGiH,WAAWjH,EAAGkH,aAAc,MAC/BlH,EAAG6U,yBAAyB,KAGzB,YAAAjH,MAAP,SAAaX,EAAWC,GACpB,GAAKjN,KAAKwX,UAAV,CAGAxX,KAAKwB,kBAEL,IAAMzB,EAAK,YAAMA,GAAE,WAEnBC,KAAK+O,OAAS/B,EACdhN,KAAKgP,QAAU/B,EAEfjN,KAAKoX,QAAUtG,EAAe2G,oBAAoB1X,GAElDC,KAAKsX,KAAO,IAAI,UAAIvX,EAAIiN,EAAGC,GAI3B,IADA,IAAMyK,EAAiB,IAAIhU,MAAM,EAAIsJ,EAAIC,GAChClP,EAAI,EAAGA,EAAI2Z,EAAK9W,SAAW7C,EAChC2Z,EAAK3Z,GAAK,IAEd,IAAMyR,EAAW,IAAIC,WAAWiI,GAE1BhI,EAAO3P,EAAG4X,cACV/H,EAAS7P,EAAG8P,OAClB7P,KAAKqX,SAAWtX,EAAGiQ,gBACnBjQ,EAAGyD,YAAYzD,EAAGe,WAAYd,KAAKqX,UACnCtX,EAAGkQ,WAAWlQ,EAAGe,WAAY,EAAGf,EAAGqQ,IAAKpD,EAAGC,EAAG,EAC1ClN,EAAGqQ,IAAKrQ,EAAGoQ,cAAeX,GAC9BzP,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAGwQ,mBAAoBX,GACvD7P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAGyQ,mBAAoBZ,GACvD7P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG0Q,eAAgBf,GACnD3P,EAAGuQ,cAAcvQ,EAAGe,WAAYf,EAAG2Q,eAAgBhB,GAQ3C,IAJJ,IAAMiE,EAAK3T,KAAKyT,WACVG,EAAK5T,KAAK0T,YAENG,EAAO,GACJC,EAAK,EAAGA,EAAKF,IAAME,EACxB,IAAK,IAAIC,EAAK,EAAGA,EAAKJ,IAAMI,EACxBF,EAAKnJ,KAAKqJ,GAAMJ,EAAK,IACrBE,EAAKnJ,KAAKoJ,GAAMF,EAAK,IAG7B,IAAM9M,EAAQ,IAAIc,aAAaiM,GAEzBxT,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGkH,aAAc5G,GAC/BN,EAAGmH,WAAWnH,EAAGkH,aAAcH,EAAO/G,EAAGoH,aACzCpH,EAAGiH,WAAWjH,EAAGkH,aAAc,MAC/BjH,KAAKqU,UAAYhU,EAGjB,IAAM4T,EAAU,GAChB,IAASH,EAAK,EAAGA,EAAKF,EAAK,IAAKE,EAC5B,IAASC,EAAK,EAAGA,EAAKJ,EAAK,IAAKI,EAC5BE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,GACvBE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,EAAK,GAC5BE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,GAE7BE,EAAQvJ,KAAKoJ,EAAKH,EAAKI,EAAK,GAC5BE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,EAAK,GAClCE,EAAQvJ,MAAMoJ,EAAK,GAAKH,EAAKI,GAI/BjN,EAAQ,IAAIoN,YAAYD,GAExB5T,EAAKN,EAAGgH,eACdhH,EAAGiH,WAAWjH,EAAGoU,qBAAsB9T,GACvCN,EAAGmH,WAAWnH,EAAGoU,qBAAsBrN,EAAO/G,EAAGoH,aACjDpH,EAAGiH,WAAWjH,EAAGoU,qBAAsB,MACvCnU,KAAKuX,SAAWlX,IAK5B,sBAAI,oBAAK,C,IAAT,WACI,OAAOL,KAAK+O,Q,gCAEhB,sBAAI,qBAAM,C,IAAV,WACI,OAAO/O,KAAKgP,S,gCAGhB,sBAAI,sBAAO,C,IAAX,WACI,OAAOhP,KAAKqX,U,gCAGhB,sBAAI,wBAAS,C,IAAb,WACI,OAAOrX,KAAKkX,Y,gCAEpB,EA/KA,CAAuB,WAiLvB,UAAeU,G,+LCvLf,cAEA,OA2DI,EAAAH,oBARJ,SAA6B1X,GACzB,IAAMwV,EAjDN,oxBAiD6BzT,QAAQ,uBAAwB,EAAAH,iBAG7D,OAAO,IAAI,UAAO5B,EAAIwV,EApBtB,6b,kHCjCJ,KAuHS,EAAAhW,KAjBT,SAAcqL,EAAcE,EAAoBC,IApGhD,SAAsBH,EAAcE,EAAoBC,GAEhD,IACM8M,EAAgB,SAACC,GACnB,IAAM9R,GAAQ8R,EAAW,GACzBlN,EAAM+C,MAAM3H,EAAMA,IAEtBqD,KAAK0O,KAAKC,YALoB,UAKeH,GAC7CA,EAAcxO,KAAK0O,KAAKE,UANM,YAS9B,IACMC,EAAa,SAAC1D,GAAsB5J,EAAM8C,KAAO8G,GACvDnL,KAAK8O,SAASH,YAFU,mBAEmBE,GAC3CA,EAAW7O,KAAK8O,SAASC,UAHD,qBAMxB,IACMC,EAAgB,SAACC,GAAsB1N,EAAM2C,eAAiB+K,GACpEjP,KAAKkP,MAAMP,YAFgB,2BAEgBK,GAC3CA,EAAchP,KAAKkP,MAAMC,SAHE,6BAM3B,IACMC,EAAe,SAACC,GAAwB9N,EAAM4C,gBAAkBkL,GACtErP,KAAKkP,MAAMP,YAFe,qBAEgBS,GAC1CA,EAAapP,KAAKkP,MAAMC,SAHE,uBAM1B,IACMG,EAAmB,SAAClL,GAAyB7C,EAAM6C,WAAaA,GACtEpE,KAAKkP,MAAMP,YAFmB,sBAEgBW,GAC9CA,EAAiBtP,KAAKkP,MAAMC,SAHE,wBAO9B,IACMtQ,EAAiB,SAACsM,GACpB1J,EAAS8G,SAAW4C,EACpBzJ,EAAS6G,SAAW4C,GAExBnL,KAAK8O,SAASH,YALc,uBAKmB9P,GAC/CA,EAAemB,KAAK8O,SAASC,UAND,yBAS5B,IACMhQ,EAAiB,SAACoM,GACpB1J,EAASgB,SAAW0I,EACpBzJ,EAASe,SAAW0I,GAExBnL,KAAK8O,SAASH,YALc,uBAKmB5P,GAC/CA,EAAeiB,KAAK8O,SAASC,UAND,yBAUtBlQ,EAAiB,SAACsM,GACpB1J,EAASoK,QAAUV,EACnBzJ,EAASmK,QAAUV,GAEvBnL,KAAK8O,SAASH,YALa,sBAKmB9P,GAC9CA,EAAemB,KAAK8O,SAASC,UANF,wBAS3B,IACM5P,EAAkB,SAACwD,GACrBlB,EAASkB,UAAYA,EACrBjB,EAASiB,UAAYA,GAEzB3C,KAAKkP,MAAMP,YALkB,qBAKgBxP,GAC7CA,EAAgBa,KAAKkP,MAAMC,SANE,uBAS7B,IACM9P,EAAmB,SAACkQ,GACtB9N,EAASmB,WAAa2M,EACtB7N,EAASkB,WAAa2M,GAE1BvP,KAAKkP,MAAMP,YALc,iBAKgBtP,GACzCA,EAAiBW,KAAKkP,MAAMC,SANH,mBASzB,IACM5P,EAAgB,SAACiJ,GACnB/G,EAAS+G,QAAUA,EACnB9G,EAAS8G,QAAUA,GAEvBxI,KAAKkP,MAAMP,YALgB,mBAKgBpP,GAC3CA,EAAcS,KAAKkP,MAAMC,SANE,qBAS3B,IACMzP,EAAY,SAACmD,GACfpB,EAASoB,IAAMA,EACfnB,EAASmB,IAAMA,GAEnB7C,KAAKkP,MAAMP,YALY,sBAKgBjP,GACvCA,EAAUM,KAAKkP,MAAMC,SANE,wBAW3BK,CAAajO,EAAOE,EAAUC,IAgBnB,EAAAG,oBAbf,SAA6B4N,EAAsBC,GAC/C,SAASC,EAAWC,GACK,OAAjBA,EAAU,GACVH,IAEAC,IAIR1P,KAAK0O,KAAKC,YADgB,SACegB,GACzCA,EAAW3P,KAAK0O,KAAKE,UAFK","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","abstract class GLResource {\r\n  private _gl: WebGLRenderingContext;\r\n\r\n  constructor(gl: WebGLRenderingContext) {\r\n    this._gl = gl;\r\n  }\r\n  \r\n  public gl(): WebGLRenderingContext {\r\n    return this._gl;\r\n  }\r\n  public abstract freeGLResources(): void;\r\n}\r\n\r\nexport default GLResource;","import GLResource from \"./gl-resource\";\r\nimport Viewport from \"./viewport\";\r\n\r\nclass FBO extends GLResource {\r\n    id: WebGLFramebuffer;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, width: number, height: number) {\r\n        super(gl);\r\n        \r\n        this.id = gl.createFramebuffer();\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    public bind(colorBuffers: WebGLTexture[], depthBuffer: WebGLRenderbuffer = null): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.id);\r\n        gl.viewport(0, 0, this.width, this.height);\r\n      \r\n        for (let i = 0; i < colorBuffers.length; ++i) {\r\n          gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER, gl['COLOR_ATTACHMENT' + i], gl.TEXTURE_2D, colorBuffers[i], 0);\r\n        }\r\n        \r\n        if (depthBuffer) {\r\n          gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n          gl.framebufferRenderbuffer(\r\n            gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n        }\r\n    }\r\n\r\n    public static bindDefault(gl: WebGLRenderingContext, viewport: Viewport=null): void {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        if (viewport === null) {\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        } else {\r\n            gl.viewport(viewport.left, viewport.lower, viewport.width, viewport.height);\r\n        }\r\n\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteFramebuffer(this.id);\r\n        this.id = null;\r\n    }\r\n}\r\n\r\nexport default FBO;","import Shader from \"./gl-utils/shader\";\r\nimport VBO from \"./gl-utils/vbo\";\r\n\r\nconst encodeDecodeStr: string =\r\n    `const float HEIGHT_RANGE = 1.0;\r\nconst float VEL_RANGE = 0.25;\r\n\r\nstruct Cell {\r\n    float h; //height\r\n    float v; //velocity\r\n};\r\n\r\n/* Decodes a float value (16 bits in [0,1])\r\n * from a 2D value (2x8bits in [0,1]x[0,1]) */\r\nfloat decode16bit(vec2 v)\r\n{\r\n    const vec2 weights = 255.0 * vec2(256.0, 1.0) / (256.0*256.0 - 1.0);\r\n    return dot(weights, v);\r\n}\r\n\r\n/* Encodes a float value (16 bits in [0,1])\r\n * into a 2D value (2x8bits in [0,1]x[0,1]) */\r\nvec2 encode16bit(float f)\r\n{\r\n    const vec2 base = (256.0*256.0 - 1.0) / vec2(256.0, 1.0);\r\n    return floor(mod(f * base, 256.0)) / 255.0;\r\n}\r\n\r\nfloat decode(vec2 v, float range)\r\n{\r\n    return (2.0 * decode16bit(v) - 1.0) * range;\r\n}\r\n\r\nvec2 encode(float value, float range)\r\n{\r\n    return encode16bit(0.5 * value / range + 0.5);\r\n}\r\n\r\nfloat decodeHeight(vec4 texel)\r\n{\r\n    return decode(texel.rg, HEIGHT_RANGE);\r\n}\r\nvec2 encodeHeight(float h)\r\n{\r\n    return encode(h, HEIGHT_RANGE);\r\n}\r\n\r\nvec3 decodeNormal(vec4 texel, float amplitude)\r\n{\r\n    vec3 result = 2.0 * texel.rgb - 1.0;\r\n    return normalize(result * vec3(amplitude, amplitude, 1));\r\n}\r\nvec4 encodeNormal(vec3 n)\r\n{\r\n    return vec4(0.5 * n + 0.5, 1);\r\n}\r\n\r\nfloat decodeVelocity(vec4 texel)\r\n{\r\n    return decode(texel.ba, VEL_RANGE);\r\n}\r\nvec2 encodeVelocity(float h)\r\n{\r\n    return encode(h, VEL_RANGE);\r\n}\r\n\r\nCell decodeCell(vec4 texel)\r\n{\r\n    return Cell(decodeHeight(texel), decodeVelocity(texel));\r\n}\r\nvec4 encodeCell(Cell cell)\r\n{\r\n    return vec4(encodeHeight(cell.h), encodeVelocity(cell.v));\r\n}`;\r\n\r\nconst fullscreenVert: string =\r\n    `attribute vec2 aCorner; //{0,1}x{0,1}\r\n\r\nvarying vec2 sampleCoords;\r\n\r\nvoid main(void) {\r\n    sampleCoords = aCorner;\r\n    gl_Position = vec4(2.0*aCorner - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst touchFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec2 uCoords;\r\nuniform vec2 uSize;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    Cell cell = decodeCell(texture2D(uWater, sampleCoords));\r\n\r\n    float dist = length((sampleCoords - uCoords) / uSize);\r\n    dist = clamp(dist, 0.0, 1.0);\r\n\r\n    cell.h = mix(-0.6*HEIGHT_RANGE, cell.h, smoothstep(0.0, 1.0, dist));\r\n    cell.v *= step(1.0, dist);\r\n\r\n    gl_FragColor = encodeCell(cell);\r\n}`;\r\n\r\nconst updateFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uPrevWater;\r\n\r\nuniform float uDt;\r\nuniform vec2 uTexelSize;\r\n\r\nuniform float uC; //surface tension\r\nuniform float uK; // vertical spring's stiffness\r\nuniform float uF; //friction\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    Cell cell = decodeCell(texture2D(uPrevWater, sampleCoords));\r\n\r\n    float neighbours = decodeHeight(texture2D(uPrevWater, sampleCoords + vec2(uTexelSize.x, 0))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords - vec2(uTexelSize.x, 0))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords + vec2(0, uTexelSize.y))) +\r\n        decodeHeight(texture2D(uPrevWater, sampleCoords - vec2(0, uTexelSize.y)));\r\n    neighbours *= 0.25;\r\n\r\n    /* Update velocity */\r\n    cell.v += -uDt * uK * cell.h; //vertical spring\r\n    cell.v += uDt * uC * (neighbours - cell.h); //surface tension\r\n    cell.v *= uF; //attenuation\r\n\r\n    /* Update position */\r\n    cell.h += uDt * cell.v;\r\n\r\n    gl_FragColor = encodeCell(cell);\r\n}`;\r\n\r\nconst normalsFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec2 uTexelSize;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\n/* Returns the normal, assuming the amplitude is 1. */\r\nvec3 computeNormal(vec2 coords)\r\n{\r\n    float dZx = decodeHeight(texture2D(uWater, coords + vec2(uTexelSize.x, 0))) -\r\n                decodeHeight(texture2D(uWater, coords - vec2(uTexelSize.x, 0)));\r\n    \r\n    float dZy = decodeHeight(texture2D(uWater, coords + vec2(0, uTexelSize.y))) -\r\n                decodeHeight(texture2D(uWater, coords - vec2(0, uTexelSize.y)));\r\n    \r\n    vec3 normal = cross(vec3(uTexelSize.x, 0, dZx), vec3(0, uTexelSize.y, dZy));\r\n    normal.xy *= 0.4 * HEIGHT_RANGE;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main(void) {\r\n    vec3 normal = computeNormal(sampleCoords);\r\n\r\n    gl_FragColor = encodeNormal(normal);\r\n}`;\r\n\r\nfunction buildTouchShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = touchFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nfunction buildUpdateShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = updateFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nfunction buildNormalsShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = normalsFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nexport {\r\n    encodeDecodeStr,\r\n    buildTouchShader,\r\n    buildUpdateShader,\r\n    buildNormalsShader,\r\n};","import GLResource from \"./gl-resource\";\r\nimport VBO from \"./vbo\";\r\n\r\nfunction notImplemented(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  if (Array.isArray(value)) {\r\n    gl.uniform1fv(location, value);\r\n  } else {\r\n    gl.uniform1f(location, value);\r\n  }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n  if (Array.isArray(value)) {\r\n    gl.uniform1iv(location, value);\r\n  } else {\r\n    gl.uniform1iv(location, value);\r\n  }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n  gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value): void {\r\n  gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n  gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture): void {\r\n  gl.uniform1i(location, unitNb);\r\n  gl.activeTexture(gl['TEXTURE' + unitNb]);\r\n  gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture): void {\r\n  gl.uniform1i(location, unitNb);\r\n  gl.activeTexture(gl['TEXTURE' + unitNb]);\r\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\ninterface Type {\r\n  str: string;\r\n  binder;//: (gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any) => void;// |\r\n  //((gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number, value: WebGLTexture) => void);\r\n};\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\nconst types = {\r\n  0x8B50: { str: 'FLOAT_VEC2', binder: bindUniformFloat2v },\r\n  0x8B51: { str: 'FLOAT_VEC3', binder: bindUniformFloat3v },\r\n  0x8B52: { str: 'FLOAT_VEC4', binder: bindUniformFloat4v },\r\n  0x8B53: { str: 'INT_VEC2', binder: bindUniformInt2v },\r\n  0x8B54: { str: 'INT_VEC3', binder: bindUniformInt3v },\r\n  0x8B55: { str: 'INT_VEC4', binder: bindUniformInt4v },\r\n  0x8B56: { str: 'BOOL', binder: bindUniformBool },\r\n  0x8B57: { str: 'BOOL_VEC2', binder: bindUniformBool2v },\r\n  0x8B58: { str: 'BOOL_VEC3', binder: bindUniformBool3v },\r\n  0x8B59: { str: 'BOOL_VEC4', binder: bindUniformBool4v },\r\n  0x8B5A: { str: 'FLOAT_MAT2', binder: bindUniformFloatMat2 },\r\n  0x8B5B: { str: 'FLOAT_MAT3', binder: bindUniformFloatMat3 },\r\n  0x8B5C: { str: 'FLOAT_MAT4', binder: bindUniformFloatMat4 },\r\n  0x8B5E: { str: 'SAMPLER_2D', binder: bindSampler2D },\r\n  0x8B60: { str: 'SAMPLER_CUBE', binder: bindSamplerCube },\r\n  0x1400: { str: 'BYTE', binder: notImplemented },\r\n  0x1401: { str: 'UNSIGNED_BYTE', binder: notImplemented },\r\n  0x1402: { str: 'SHORT', binder: notImplemented },\r\n  0x1403: { str: 'UNSIGNED_SHORT', binder: notImplemented },\r\n  0x1404: { str: 'INT', binder: bindUniformInt },\r\n  0x1405: { str: 'UNSIGNED_INT', binder: notImplemented },\r\n  0x1406: { str: 'FLOAT', binder: bindUniformFloat }\r\n};\r\n\r\ninterface ShaderUniform {\r\n  value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n  loc: WebGLUniformLocation;\r\n  size: number;\r\n  type: number;\r\n}\r\n\r\ninterface ShaderAttribute {\r\n  VBO: VBO;\r\n  loc: GLint;\r\n  size: number;\r\n  type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n  id: WebGLProgram;\r\n  uCount: number;\r\n  u: ShaderUniform[];\r\n\r\n  aCount: number;\r\n  a: ShaderAttribute[];\r\n\r\n  constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n    function createShader(type: GLenum, source: string): WebGLShader {\r\n      const shader = gl.createShader(type);\r\n      gl.shaderSource(shader, source);\r\n      gl.compileShader(shader);\r\n\r\n      const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n      if (!success) {\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n      }\r\n\r\n      return shader;\r\n    }\r\n\r\n    super(gl);\r\n\r\n    this.id = null;\r\n    this.uCount = 0;\r\n    this.aCount = 0;\r\n\r\n    const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n    const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n    const id = gl.createProgram();\r\n    gl.attachShader(id, vertexShader);\r\n    gl.attachShader(id, fragmentShader);\r\n    gl.linkProgram(id);\r\n\r\n    const success = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n    if (!success) {\r\n      console.log(gl.getProgramInfoLog(id));\r\n      gl.deleteProgram(id);\r\n    } else {\r\n      this.id = id;\r\n\r\n      this.introspection();\r\n    }\r\n  }\r\n\r\n  public freeGLResources(): void {\r\n    super.gl().deleteProgram(this.id);\r\n    this.id = null;\r\n  }\r\n\r\n  private introspection(): void {\r\n    const gl = super.gl();\r\n\r\n    this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n    this.u = [];\r\n    for (let i = 0; i < this.uCount; ++i) {\r\n      const uniform = gl.getActiveUniform(this.id, i);\r\n      const name = uniform.name;\r\n\r\n      this.u[name] = {\r\n        value: null,\r\n        loc: gl.getUniformLocation(this.id, name),\r\n        size: uniform.size,\r\n        type: uniform.type,\r\n      };\r\n    }\r\n\r\n    this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n    this.a = [];\r\n    for (let i = 0; i < this.aCount; ++i) {\r\n      const attribute = gl.getActiveAttrib(this.id, i);\r\n      const name = attribute.name;\r\n\r\n      this.a[name] = {\r\n        VBO: null,\r\n        loc: gl.getAttribLocation(this.id, name),\r\n        size: attribute.size,\r\n        type: attribute.type,\r\n      };\r\n    }\r\n  }\r\n\r\n  public use(): void {\r\n    super.gl().useProgram(this.id);\r\n  }\r\n\r\n  public bindUniforms(): void {\r\n    const gl: WebGLRenderingContext = super.gl();\r\n    let currTextureUnitNb: number = 0;\r\n\r\n    for (let uName in this.u) {\r\n      const uniform = this.u[uName];\r\n      if (uniform.value !== null) {\r\n        if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n          const unitNb: number = currTextureUnitNb;\r\n          types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n          currTextureUnitNb++;\r\n        } else {\r\n          types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public bindAttributes(): void {\r\n    for (let aName in this.a) {\r\n      const attribute = this.a[aName];\r\n      if (attribute.VBO !== null) {\r\n        attribute.VBO.bind(attribute.loc);\r\n      }\r\n    }\r\n  }\r\n\r\n  public bindUniformsAndAttributes(): void {\r\n    this.bindUniforms();\r\n    this.bindAttributes();\r\n  }\r\n}\r\n\r\nexport default ShaderProgram;","import GLResource from \"./gl-resource\";\r\n\r\nclass VBO extends GLResource {\r\n  private id: WebGLBuffer;\r\n  private size: number;\r\n  private type: GLenum;\r\n  private normalize: GLboolean;\r\n  private stride: GLsizei;\r\n  private offset: GLintptr;\r\n\r\n  constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum) {\r\n    super(gl);\r\n\r\n    this.id = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n    gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n    this.size = size;\r\n    this.type = type;\r\n    this.normalize = false;\r\n    this.stride = 0;\r\n    this.offset = 0;\r\n  }\r\n\r\n  public freeGLResources(): void {\r\n    this.gl().deleteBuffer(this.id);\r\n    this.id = null;\r\n  }\r\n\r\n  public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n    let vert = [\r\n      minX, minY,\r\n      maxX, minY,\r\n      minX, maxY,\r\n      maxX, maxY,\r\n    ];\r\n\r\n    return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT);\r\n  }\r\n\r\n  public bind(location: GLuint): void {\r\n    const gl = super.gl();\r\n\r\n    gl.enableVertexAttribArray(location);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n    gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n  }\r\n};\r\n\r\nexport default VBO;","import GLResource from \"../gl-utils/gl-resource\";\r\nimport Water from \"../water\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\n\r\nabstract class Viewer extends GLResource {\r\n    private _showSpecular: boolean;\r\n    private _showCaustics: boolean;\r\n    private _useFresnel: boolean;\r\n    private _amplitude: number;\r\n    private _waterLevel: number;\r\n    private _opacity: number;\r\n    private _eta: number;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        super(gl);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n    }\r\n\r\n    public abstract display(water: Water, common: ViewerCommon): void;\r\n\r\n    public abstract interact(water: Water): void;\r\n\r\n    protected abstract updateSpecular(): void;\r\n    protected abstract updateCaustics(): void;\r\n    protected abstract updateFresnel(): void;\r\n    protected abstract updateAmplitude(): void;\r\n    protected abstract updateWaterLevel(): void;\r\n    protected abstract updateOpacity(): void;\r\n    protected abstract updateEta(): void;\r\n\r\n    set specular(b: boolean) {\r\n        this._showSpecular = b;\r\n        this.updateSpecular();\r\n    }\r\n    get specular(): boolean {\r\n        return this._showSpecular;\r\n    }\r\n\r\n    set caustics(b: boolean) {\r\n        this._showCaustics = b;\r\n        this.updateCaustics();\r\n    }\r\n    get caustics(): boolean {\r\n        return this._showCaustics;\r\n    }\r\n\r\n    set fresnel(b: boolean) {\r\n        this._useFresnel = b;\r\n        this.updateFresnel();\r\n    }\r\n    get fresnel(): boolean {\r\n        return this._useFresnel;\r\n    }\r\n\r\n    set amplitude(a: number) {\r\n        this._amplitude = a;\r\n        this.updateAmplitude();\r\n    }\r\n    get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    set waterLevel(d: number) {\r\n        this._waterLevel = d;\r\n        this.updateWaterLevel();\r\n    }\r\n    get waterLevel(): number {\r\n        return this._waterLevel;\r\n    }\r\n\r\n    set opacity(o: number) {\r\n        this._opacity = o;\r\n        this.updateOpacity();\r\n    }\r\n    get opacity(): number {\r\n        return this._opacity;\r\n    }\r\n\r\n    set eta(e: number) {\r\n        this._eta = e;\r\n        this.updateEta();\r\n    }\r\n    get eta(): number {\r\n        return this._eta;\r\n    }\r\n}\r\n\r\nexport default Viewer;","import * as Utils from \"./gl-utils/utils\";\r\nimport FBO from \"./gl-utils/fbo\";\r\nimport Water from \"./water\";\r\nimport Viewer from \"./viewer/viewer\";\r\nimport Viewer2D from \"./viewer/viewer2D\";\r\nimport Viewer3D from \"./viewer/viewer3D\";\r\nimport ViewerCommon from \"./viewer/viewerCommon\";\r\nimport * as Controls from \"./controls\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(canvas: HTMLCanvasElement, flags: any): WebGLRenderingContext {\r\n    function setError(message: string) {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    let gl: WebGLRenderingContext = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (!gl) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (!gl) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return null;\r\n        }\r\n        setError(\"Your browser or device only supports experimental WebGL.\\n\" +\r\n            \"The simulation may not run as expected.\");\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 0);\r\n\r\n    Utils.resizeCanvas(gl, false);\r\n\r\n    return gl;\r\n}\r\n\r\nfunction main() {\r\n    const canvas: HTMLCanvasElement = Page.Canvas.getCanvas();\r\n    const gl: WebGLRenderingContext = initGL(canvas, {});\r\n    if (!gl)\r\n        return;\r\n\r\n    const toggleFullscreen = (fullscreen: boolean) => {\r\n        Page.Canvas.getCanvasContainer().style.background = fullscreen ? \"#BCBCC6\" : \"none\";\r\n    };\r\n    Page.Canvas.Observers.fullscreenToggle.push(toggleFullscreen);\r\n    toggleFullscreen(Page.Canvas.isFullScreen());\r\n\r\n    const side = 512;\r\n    const water: Water = new Water(gl, side, side);\r\n    const viewerCommon: ViewerCommon = new ViewerCommon(gl, 512, \"rc/tile.png\");\r\n    const viewer2D: Viewer2D = new Viewer2D(gl, viewerCommon);\r\n    const viewer3D: Viewer3D = new Viewer3D(gl, viewerCommon);\r\n\r\n    Controls.bind(water, viewer2D, viewer3D);\r\n\r\n    let viewer: Viewer = viewer3D;\r\n    Controls.bindRendererChooser(\r\n        () => { viewer = viewer2D; },\r\n        () => { viewer = viewer3D; });\r\n\r\n    /* Update the FPS indicator every second. */\r\n    let instantFPS: number = 0;\r\n    const updateFpsText = function () {\r\n        Page.Canvas.setIndicatorText(\"fps\", instantFPS.toFixed(0));\r\n    };\r\n    setInterval(updateFpsText, 1000);\r\n\r\n    const MAX_FPS = 60;\r\n    const MIN_TIMESTEP = 1 / MAX_FPS;\r\n    let lastUpdateTime = 0;\r\n    let lastFrameTime = 0;\r\n    function mainLoop(time) {\r\n        time *= 0.001; //dt is now in seconds\r\n        instantFPS = 1 / (time - lastFrameTime);\r\n        lastFrameTime = time;\r\n\r\n        if (time - lastUpdateTime > MIN_TIMESTEP) { // don't update too often or the sim will look fast-forwarded\r\n            lastUpdateTime = time;\r\n\r\n            /* Updating */\r\n            viewer.interact(water);\r\n            water.update(1 / 60); // fixed timestep, independant from FPS to avoid float precision issues\r\n        }\r\n\r\n        Utils.resizeCanvas(gl, false);\r\n\r\n        /* Drawing */\r\n        if (viewer.caustics) {\r\n            viewerCommon.caustics.compute(water, viewer.amplitude, viewer.waterLevel, viewer.eta);\r\n        }\r\n\r\n        FBO.bindDefault(gl);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        viewer.display(water, viewerCommon);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","function resizeCanvas(gl: WebGLRenderingContext, hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width != width || canvas.height != height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport { resizeCanvas };","import GLResource from \"./gl-utils/gl-resource\";\r\nimport FBO from \"./gl-utils/fbo\";\r\nimport Shader from \"./gl-utils/shader\";\r\nimport * as ShaderBuilder from \"./water-shaders\";\r\n\r\nclass Water extends GLResource {\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    private _FBO: FBO;\r\n\r\n    private _normalsTex: WebGLTexture;\r\n    private _heightmapsTex: WebGLTexture[];\r\n    private _currIndex: number;\r\n\r\n    private _touchShader: Shader;\r\n    private _updateShader: Shader;\r\n    private _normalsShader: Shader;\r\n\r\n    private _surfaceTension: number;\r\n    private _springStiffness: number;\r\n    private _dispersion: number;\r\n\r\n    public rain: boolean;\r\n\r\n    constructor(gl: WebGLRenderingContext, w: number, h: number) {\r\n        super(gl);\r\n\r\n        this._FBO = new FBO(gl, w, h);\r\n        this._touchShader = ShaderBuilder.buildTouchShader(gl);\r\n        this._updateShader = ShaderBuilder.buildUpdateShader(gl);\r\n        this._normalsShader = ShaderBuilder.buildNormalsShader(gl);\r\n\r\n        this.surfaceTension = 20.0;\r\n        this.springStiffness = 0.1;\r\n        this.dispersion = 0.999;\r\n\r\n        this.rain = true;\r\n\r\n        this.reset(w, h);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        if (this._FBO) {\r\n            this._FBO.freeGLResources();\r\n        }\r\n\r\n        this.freeTextures();\r\n        this.freeShaders();\r\n    }\r\n\r\n    private freeTextures(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        if (this._normalsTex) {\r\n            gl.deleteTexture(this._normalsTex);\r\n        }\r\n        if (this._heightmapsTex) {\r\n            gl.deleteTexture(this._heightmapsTex[0]);\r\n            gl.deleteTexture(this._heightmapsTex[1]);\r\n        }\r\n    }\r\n\r\n    private freeShaders(): void {\r\n        if (this._touchShader) {\r\n            this._touchShader.freeGLResources();\r\n        }\r\n\r\n        if (this._updateShader) {\r\n            this._updateShader.freeGLResources();\r\n        }\r\n    }\r\n\r\n    public update(dt: number): void {\r\n        const gl = this.gl(); //shortcut\r\n\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.disable(gl.DEPTH_TEST);\r\n\r\n        if (this.rain && Math.random() < 0.1) {\r\n            this.touch(Math.random() * this.width, Math.random() * this.height, 8);\r\n        }\r\n\r\n        const updateShader = this._updateShader;\r\n\r\n        updateShader.u[\"uPrevWater\"].value = this.currHeightmap;\r\n        updateShader.u[\"uDt\"].value = dt * 10;\r\n\r\n        this._FBO.bind([this.nextHeightmap]);\r\n        updateShader.use();\r\n        updateShader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n        this.switchHeightmaps();\r\n\r\n        this.computeNormals();\r\n    }\r\n\r\n    private computeNormals(): void {\r\n        const gl = this.gl(); //shortcut\r\n        const shader = this._normalsShader;\r\n\r\n        shader.u[\"uWater\"].value = this.currHeightmap;\r\n\r\n        this._FBO.bind([this._normalsTex]);\r\n        shader.use();\r\n        shader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n\r\n    public touch(coordX: number, coordY: number, radius: number): void {\r\n        const gl = this.gl(); //shortcut\r\n        const touchShader = this._touchShader;\r\n\r\n        touchShader.u[\"uWater\"].value = this.currHeightmap;\r\n        touchShader.u[\"uCoords\"].value = [coordX / this.width, coordY / this.height];\r\n        touchShader.u[\"uSize\"].value = [radius / this.width, radius / this.height];\r\n\r\n        this._FBO.bind([this.nextHeightmap]);\r\n        touchShader.use();\r\n        touchShader.bindUniformsAndAttributes();\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\r\n        this.switchHeightmaps();\r\n        this.computeNormals();\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set surfaceTension(c: number) {\r\n        this._surfaceTension = c;\r\n        this._updateShader.u[\"uC\"].value = c;\r\n    }\r\n    set springStiffness(k: number) {\r\n        this._springStiffness = k;\r\n        this._updateShader.u[\"uK\"].value = k;\r\n    }\r\n    set dispersion(f: number) {\r\n        this._dispersion = f;\r\n        this._updateShader.u[\"uF\"].value = f;\r\n    }\r\n\r\n    get surfaceTension(): number {\r\n        return this._surfaceTension;\r\n    }\r\n    get springStiffness(): number {\r\n        return this._springStiffness;\r\n    }\r\n    get dispersion(): number {\r\n        return this._dispersion;\r\n    }\r\n\r\n    get heightmap(): WebGLTexture {\r\n        return this._heightmapsTex[this._currIndex];\r\n    }\r\n\r\n    get normalmap(): WebGLTexture {\r\n        return this._normalsTex;\r\n    }\r\n\r\n    private get currHeightmap(): WebGLTexture {\r\n        return this._heightmapsTex[this._currIndex];\r\n    }\r\n\r\n    private get nextHeightmap(): WebGLTexture {\r\n        return this._heightmapsTex[(this._currIndex + 1) % 2];\r\n    }\r\n\r\n    private switchHeightmaps(): void {\r\n        this._currIndex = (this._currIndex + 1) % 2;\r\n    }\r\n\r\n    public reset(w: number, h: number): void {\r\n        this.freeTextures();\r\n\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._width = w;\r\n        this._height = h;\r\n        this._FBO.width = w;\r\n        this._FBO.height = h;\r\n\r\n        this._updateShader.u[\"uTexelSize\"].value = [1 / w, 1 / h];\r\n        this._normalsShader.u[\"uTexelSize\"].value = [1 / w, 1 / h];\r\n\r\n        const uintTexels: number[] = new Array(4 * w * h);\r\n        for (let i = 0; i < uintTexels.length;  ++i) {\r\n            uintTexels[i] = 127;\r\n        }\r\n        const uintData = new Uint8Array(uintTexels);\r\n\r\n        const wrap = gl.REPEAT;\r\n        const filter = gl.LINEAR;\r\n        let textures: WebGLTexture[] = [];\r\n        for (let i = 0; i < 2; ++i) {\r\n            let texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0,\r\n                gl.RGBA, gl.UNSIGNED_BYTE, uintData);\r\n            textures.push(texture);\r\n        }\r\n        {\r\n            let texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, w, h, 0,\r\n                gl.RGB, gl.UNSIGNED_BYTE, uintData);\r\n            textures.push(texture);\r\n        }\r\n\r\n        for (let iT of textures) {\r\n            gl.bindTexture(gl.TEXTURE_2D, iT);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n        }\r\n\r\n        this._normalsTex = textures[2];\r\n        this._heightmapsTex = [textures[0], textures[1]];\r\n        this._currIndex = 0;\r\n\r\n        this.computeNormals();\r\n    }\r\n}\r\n\r\nexport default Water;","import Viewer from \"./viewer\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\nimport Water from \"../water\";\r\nimport Caustics from \"./caustics\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport Viewport from \"../gl-utils/viewport\";\r\nimport * as ShadersBuilder from \"./viewer2D-shaders\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass Viewer2D extends Viewer {\r\n    private _displayShader: Shader;\r\n    private _viewport: Viewport;\r\n\r\n    constructor(gl: WebGLRenderingContext, common: ViewerCommon) {\r\n        super(gl);\r\n        \r\n        this._displayShader = ShadersBuilder.buildDisplayShader(gl);\r\n        this._displayShader.u[\"uTileTexture\"].value = common.tileTexture;\r\n        this._displayShader.u[\"uCaustics\"].value = common.caustics.texture;\r\n\r\n        this._viewport = new Viewport;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this._displayShader.freeGLResources();\r\n    }\r\n\r\n    private updateViewport(): void {\r\n        const gl = super.gl();\r\n        const side = Math.min(gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        \r\n        this._viewport.left = 0.5 * (gl.drawingBufferWidth - side);\r\n        this._viewport.lower = 0.5 * (gl.drawingBufferHeight - side);\r\n        this._viewport.width = side;\r\n        this._viewport.height = side;\r\n    }\r\n\r\n    public display(water: Water, common: ViewerCommon): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this.updateViewport();\r\n\r\n        gl.disable(gl.CULL_FACE);\r\n        gl.disable(gl.DEPTH_TEST);\r\n\r\n        const displayShader = this._displayShader;\r\n\r\n        FBO.bindDefault(gl, this._viewport);\r\n\r\n        displayShader.u[\"uWater\"].value = water.heightmap;\r\n        displayShader.u[\"uNormals\"].value = water.normalmap;\r\n\r\n        displayShader.use();\r\n        displayShader.bindUniformsAndAttributes();\r\n\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n\r\n    public interact(water: Water): void {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const canvasSize = Page.Canvas.getSize();\r\n            const p = Page.Canvas.getMousePosition(); // normalized\r\n            p[0] *= canvasSize[0]; //in pixels\r\n            p[1] = (1 - p[1]) * canvasSize[1]; //in pixels\r\n\r\n            this.updateViewport();\r\n            p[0] = (p[0] - this._viewport.left) / this._viewport.width;\r\n            p[1] = (p[1] - this._viewport.lower) / this._viewport.height;\r\n\r\n            water.touch(p[0] * water.width, p[1] * water.height, 8);\r\n        }\r\n    }\r\n\r\n    protected updateSpecular(): void {\r\n        this._displayShader.u[\"uShowSpecular\"].value = this.specular;\r\n    }\r\n\r\n    protected updateCaustics(): void {\r\n        this._displayShader.u[\"uShowCaustics\"].value = this.caustics;\r\n    }\r\n\r\n    protected updateFresnel(): void {\r\n    }\r\n\r\n    protected updateAmplitude(): void {\r\n        this._displayShader.u[\"uAmplitude\"].value = this.amplitude;\r\n    }\r\n\r\n    protected updateWaterLevel(): void {\r\n        this._displayShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n    }\r\n\r\n    protected updateOpacity(): void {\r\n        this._displayShader.u[\"uOpacity\"].value = this.opacity;\r\n    }\r\n    \r\n    protected updateEta(): void {\r\n        this._displayShader.u[\"uEta\"].value = this.eta;\r\n    }\r\n}\r\n\r\nexport default Viewer2D;","class Viewport {\r\n    public lower: number;\r\n    public left: number;\r\n    public width: number;\r\n    public height: number;\r\n}\r\n\r\nexport default Viewport;","import Shader from \"../gl-utils/shader\";\r\nimport VBO from \"../gl-utils/vbo\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst fullscreenVert: string =\r\n    `attribute vec2 aCorner; //{0,1}x{0,1}\r\n\r\nvarying vec2 sampleCoords;\r\n\r\nvoid main(void) {\r\n    sampleCoords = aCorner;\r\n    gl_Position = vec4(2.0*aCorner - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst displayFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\nuniform sampler2D uCaustics;\r\nuniform sampler2D uTileTexture;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\nuniform float uEta;\r\nuniform float uOpacity;\r\nuniform bool uShowSpecular;\r\nuniform bool uShowCaustics;\r\n\r\nvarying vec2 sampleCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nconst vec3 WATER_COLOR = vec3(0.0, 0.2, 0.5);\r\nconst vec3 SPECULAR_COLOR = vec3(1);\r\nconst float TILE_REPETITION = 4.0;\r\n\r\nvoid main(void)\r\n{\r\n    float height = decodeHeight(texture2D(uWater, sampleCoords));\r\n    height = uWaterLevel + 0.5 * uAmplitude * height;\r\n    vec3 normal = decodeNormal(texture2D(uNormals, sampleCoords), uAmplitude);\r\n\r\n    vec3 position = vec3(sampleCoords, height);\r\n\r\n    const vec3 fromEye = vec3(0, 0, -1);\r\n    vec3 refracted = refract(fromEye, normal, uEta);\r\n    refracted *= height / refracted.z;\r\n    vec2 coordsOnFloor = sampleCoords + refracted.xy;\r\n\r\n    vec3 tileColor = texture2D(uTileTexture, TILE_REPETITION * coordsOnFloor).rgb;\r\n    float caustics = texture2D(uCaustics, coordsOnFloor).r;\r\n    caustics = mix(0.5, caustics, float(uShowCaustics));\r\n    vec3 floorColor = tileColor * (0.5 + caustics);\r\n\r\n    float opacity = clamp(uOpacity * length(refracted), 0.0, 1.0);\r\n    vec3 color = mix(floorColor, WATER_COLOR, opacity);\r\n\r\n    // const vec3 fromLight = normalize(vec3(.05, -.1, -.8));\r\n    const vec3 fromLight = vec3(-.061898, -.123797, -.990405); // precomputed for IE11\r\n    vec3 reflected = reflect(fromLight, normal);\r\n    float specular = max(0.0, dot(reflected, -fromEye));\r\n    specular = pow(specular, 1000.0) * float(uShowSpecular);\r\n\r\n    gl_FragColor = vec4(color + specular, 1);\r\n}`;\r\n\r\nfunction buildDisplayShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc: string = fullscreenVert;\r\n    const fragSrc = displayFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n\r\n    const shader: Shader = new Shader(gl, vertSrc, fragSrc);\r\n    shader.a[\"aCorner\"].VBO = VBO.createQuad(gl, 0, 0, 1, 1);\r\n    return shader\r\n}\r\n\r\nexport {\r\n    buildDisplayShader,\r\n};","import Viewer from \"./viewer\";\r\nimport ViewerCommon from \"./viewerCommon\";\r\nimport Water from \"../water\";\r\nimport Caustics from \"./caustics\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport * as ShadersBuilder from \"./viewer3D-shaders\";\r\nimport OrbitalCamera from \"../orbitalCamera\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\ndeclare const mat4: any;\r\ndeclare const vec3: any;\r\n\r\nclass Viewer3D extends Viewer {\r\n    private _vertices: WebGLBuffer;\r\n    private _normals: WebGLBuffer;\r\n\r\n    private _pMatrix: number[];\r\n    private _mvpMatrix: number[];\r\n    private _camera: OrbitalCamera;\r\n    private _lightDirection: number[];\r\n\r\n    private _sidesShader: Shader;\r\n    private _surfaceShader: Shader;\r\n\r\n    private _gridWidth: number;\r\n    private _gridHeight: number;\r\n\r\n    private _gridVertices: WebGLBuffer;\r\n    private _gridIndices: WebGLBuffer;\r\n\r\n    constructor(gl: WebGLRenderingContext, common: ViewerCommon) {\r\n        super(gl);\r\n        const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n        this._pMatrix = mat4.create();\r\n        this._mvpMatrix = mat4.create();\r\n        mat4.perspective(this._pMatrix, 45, canvas.clientWidth / canvas.clientHeight, 0.1, 100.0);\r\n\r\n        this._camera = new OrbitalCamera([0, 0, this.waterLevel - .5], 1.7);\r\n        this._camera.theta = 0;\r\n        this._camera.phi = 0.8;\r\n\r\n        this._lightDirection = vec3.fromValues(1, 0, -1);\r\n        vec3.normalize(this._lightDirection, this._lightDirection);\r\n\r\n        const n = 256;\r\n        this.initSurface(n, n);\r\n\r\n        this.init();\r\n\r\n        const shaders = [this._sidesShader, this._surfaceShader];\r\n        for (let shader of shaders) {\r\n            shader.u[\"uTileTexture\"].value = common.tileTexture;\r\n            shader.u[\"uCaustics\"].value = common.caustics.texture;\r\n            shader.u[\"uLightDir\"].value = this._lightDirection;\r\n        }\r\n\r\n        const minPhi = 0.000001, maxPhi = 1.2;\r\n        Page.Canvas.Observers.mouseDrag.push((dX: number, dY: number) => {\r\n            this._camera.theta -= 0.5 * 2 * 3.14159 * dX;\r\n            this._camera.phi -= 0.5 * 2 * dY;\r\n            this._camera.phi = Math.min(maxPhi, Math.max(minPhi, this._camera.phi));\r\n            this.updateMVPMatrix();\r\n        });\r\n\r\n        const minDist = 1.42, maxDist = 3;\r\n        Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n            let d = this._camera.distance + 0.2 * delta;\r\n            d = Math.min(maxDist, Math.max(minDist, d));\r\n            this._camera.distance = d;\r\n            this.updateMVPMatrix();\r\n        });\r\n    }\r\n\r\n    private updatePMatrix(): void {\r\n      const canvas = super.gl().canvas as HTMLCanvasElement;\r\n        mat4.perspective(this._pMatrix, 45, canvas.clientWidth / canvas.clientHeight, 0.1, 100.0);\r\n    }\r\n\r\n    private updateMVPMatrix(): void {\r\n        this.updatePMatrix();\r\n        mat4.multiply(this._mvpMatrix, this._pMatrix, this._camera.viewMatrix);\r\n    }\r\n\r\n    public initSurface(w: number, h: number): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._gridWidth = w;\r\n        this._gridHeight = h;\r\n\r\n        /* Grid vertices */\r\n        {\r\n            const nX = this._gridWidth;\r\n            const nY = this._gridHeight;\r\n            {\r\n                const vert = [];\r\n                for (let iY = 0; iY < nY; ++iY) {\r\n                    for (let iX = 0; iX < nX; ++iX) {\r\n                        vert.push(iX / (nX - 1));\r\n                        vert.push(iY / (nY - 1));\r\n                    }\r\n                }\r\n                const array = new Float32Array(vert);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n                this._gridVertices = id;\r\n            }\r\n            {\r\n                const indices = [];\r\n                for (let iY = 0; iY < nY - 1; ++iY) {\r\n                    for (let iX = 0; iX < nX - 1; ++iX) {\r\n                        indices.push(iY * nX + iX);\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n                    }\r\n                }\r\n\r\n                const array = new Uint16Array(indices);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n                this._gridIndices = id;\r\n            }\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        gl.deleteBuffer(this._vertices);\r\n        gl.deleteBuffer(this._normals);\r\n        this._sidesShader.freeGLResources();\r\n        this._surfaceShader.freeGLResources();\r\n\r\n        gl.deleteBuffer(this._gridVertices);\r\n        gl.deleteBuffer(this._gridIndices);\r\n    }\r\n\r\n    public display(water: Water, common: ViewerCommon): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        /* Update camera position */\r\n        this._sidesShader.u[\"uEyePos\"].value = this._camera.eyePos;\r\n        this._surfaceShader.u[\"uEyePos\"].value = this._camera.eyePos;\r\n\r\n        this.updateMVPMatrix();\r\n\r\n        /* Actual displaying */\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        this.displaySides(water);\r\n        this.displaySurface(water);\r\n    }\r\n\r\n    public interact(water: Water): void {\r\n    }\r\n\r\n    private displaySides(water: Water): void {\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._sidesShader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n\r\n        shader.use();\r\n        shader.bindUniforms();\r\n\r\n        const vLoc = 0;\r\n        const nLoc = 1;\r\n        gl.enableVertexAttribArray(vLoc);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertices);\r\n        gl.vertexAttribPointer(vLoc, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.enableVertexAttribArray(nLoc);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._normals);\r\n        gl.vertexAttribPointer(nLoc, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 4 * 6);\r\n\r\n        gl.disableVertexAttribArray(nLoc);\r\n        gl.disableVertexAttribArray(vLoc);\r\n    }\r\n\r\n    private displaySurface(water: Water): void {\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._surfaceShader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n        shader.u[\"uNormals\"].value = water.normalmap;\r\n\r\n        shader.use();\r\n        shader.bindUniforms();\r\n\r\n        gl.enableVertexAttribArray(0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._gridVertices);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._gridIndices);\r\n\r\n        const nbTriangles = 2 * (this._gridWidth - 1) * (this._gridHeight - 1);\r\n        gl.drawElements(gl.TRIANGLES, 3 * nbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.disableVertexAttribArray(0);\r\n    }\r\n\r\n    private init() {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._sidesShader = ShadersBuilder.buildSidesShader(gl);\r\n        this._sidesShader.u[\"uMVPMatrix\"].value = this._mvpMatrix;\r\n\r\n        this._surfaceShader = ShadersBuilder.buildSurfaceShader(gl);\r\n        this._surfaceShader.u[\"uMVPMatrix\"].value = this._mvpMatrix;\r\n\r\n        /* Buffer data */\r\n        {\r\n            const vert = [\r\n                +.5, -.5, +1,\r\n                -.5, -.5, +1,\r\n                -.5, -.5, +0,\r\n                +.5, -.5, +1,\r\n                -.5, -.5, +0,\r\n                +.5, -.5, +0,\r\n\r\n                +.5, +.5, +1,\r\n                +.5, -.5, +1,\r\n                +.5, -.5, +0,\r\n                +.5, +.5, +1,\r\n                +.5, -.5, +0,\r\n                +.5, +.5, +0,\r\n\r\n                +.5, +.5, +1,\r\n                -.5, +.5, +0,\r\n                -.5, +.5, +1,\r\n                -.5, +.5, +0,\r\n                +.5, +.5, +1,\r\n                +.5, +.5, +0,\r\n\r\n                -.5, -.5, +1,\r\n                -.5, +.5, +1,\r\n                -.5, -.5, +0,\r\n                -.5, -.5, +0,\r\n                -.5, +.5, +1,\r\n                -.5, +.5, +0,];\r\n\r\n            const id = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vert), gl.STATIC_DRAW);\r\n            this._vertices = id;\r\n        }\r\n\r\n        {\r\n            const norm = [\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n                0, -1,\r\n\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n                +1, 0,\r\n\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n                0, +1,\r\n\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,\r\n                -1, 0,];\r\n\r\n            const id = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(norm), gl.STATIC_DRAW);\r\n            this._normals = id;\r\n        }\r\n    }\r\n\r\n    protected updateSpecular(): void {\r\n        this._sidesShader.u[\"uSpecular\"].value = this.specular;\r\n        this._surfaceShader.u[\"uSpecular\"].value = this.specular;\r\n    }\r\n\r\n    protected updateCaustics(): void {\r\n        this._sidesShader.u[\"uShowCaustics\"].value = this.caustics;\r\n        this._surfaceShader.u[\"uShowCaustics\"].value = this.caustics;\r\n    }\r\n\r\n    protected updateFresnel(): void {\r\n        this._sidesShader.u[\"uFresnel\"].value = this.fresnel;\r\n        this._surfaceShader.u[\"uFresnel\"].value = this.fresnel;\r\n    }\r\n\r\n    protected updateAmplitude(): void {\r\n        const amplitude = 5 * this.amplitude;\r\n        this._sidesShader.u[\"uAmplitude\"].value = amplitude;\r\n        this._surfaceShader.u[\"uAmplitude\"].value = amplitude;\r\n    }\r\n\r\n    protected updateWaterLevel(): void {\r\n        this._sidesShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n        this._surfaceShader.u[\"uWaterLevel\"].value = this.waterLevel;\r\n        this._camera.focusPoint = [0, 0, this.waterLevel - .5];\r\n        this.updateMVPMatrix();\r\n    }\r\n\r\n    protected updateOpacity(): void {\r\n        this._sidesShader.u[\"uOpacity\"].value = this.opacity;\r\n        this._surfaceShader.u[\"uOpacity\"].value = this.opacity;\r\n    }\r\n\r\n    protected updateEta(): void {\r\n        this._sidesShader.u[\"uEta\"].value = this.eta;\r\n        this._surfaceShader.u[\"uEta\"].value = this.eta;\r\n\r\n        let F0 = (1 - this.eta) / (1 + this.eta);\r\n        F0 = F0 * F0;\r\n        this._sidesShader.u[\"uF0\"].value = F0;\r\n        this._surfaceShader.u[\"uF0\"].value = F0;\r\n    }\r\n}\r\n\r\nexport default Viewer3D;","import Shader from \"../gl-utils/shader\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst waterCommonStr: string =\r\n    `\r\nuniform sampler2D uCaustics;\r\nuniform sampler2D uTileTexture;\r\n\r\nuniform vec3 uLightDir; //normalized\r\n\r\nuniform float uF0;\r\nuniform float uEta;\r\nuniform float uOpacity;\r\nuniform bool uSpecular;\r\nuniform bool uShowCaustics;\r\nuniform bool uFresnel;\r\n\r\nconst vec3 WATER_COLOR = vec3(0.0, 0.2, 0.5);\r\nconst vec3 SPECULAR_COLOR = vec3(1);\r\nconst float TILE_REPETITION = 4.0;\r\n\r\n/* Fresnel factor describes the proportion of refracted and reflected.\r\n* Arguments expected to be normalized. */\r\nfloat getFresnelFactor(const vec3 normal, const vec3 fromEye)\r\n{\r\n    float computed = mix(pow(1.0 - dot(normal,-fromEye), 5.0), 1.0, uF0);\r\n    return min(float(uFresnel), computed);\r\n}\r\n\r\nvec3 getTileColor(const vec2 coords)\r\n{\r\n    return texture2D(uTileTexture, TILE_REPETITION * coords).rgb;\r\n}\r\n\r\nfloat getCaustics(const vec2 coords)\r\n{\r\n    return mix(0.5, texture2D(uCaustics, coords).r, float(uShowCaustics));\r\n}\r\n\r\nvec3 getFloorColor(const vec2 coords)\r\n{\r\n    if (any(lessThan(coords, vec2(0))) || any(greaterThan(coords, vec2(1)))) {\r\n        return vec3(0);\r\n    }\r\n\r\n    return getTileColor(coords) * (0.5 + getCaustics(coords));\r\n}\r\n\r\n/* Floor color mixed with opacity.\r\n* 'refracted' expected to be normalized. */\r\nvec3 getRefractedColor(const vec3 entryPoint, vec3 refracted)\r\n{\r\n    if (refracted.z >= 0.0) {\r\n        return WATER_COLOR;\r\n    }\r\n\r\n    refracted *= -entryPoint.z / refracted.z;\r\n\r\n    vec2 groundCoords = entryPoint.xy + refracted.xy;\r\n    vec3 floorColor = getFloorColor(groundCoords + .5);\r\n\r\n    /*float f = 1.0;\r\n\r\n    if (groundCoords.x < -.5) {\r\n        f = min(f, abs((-.5 - entryPoint.x) / (groundCoords.x - entryPoint.x)));\r\n    }\r\n    if (groundCoords.x > .5) {\r\n        f = min(f, abs((.5 - entryPoint.x) / (groundCoords.x - entryPoint.x)));\r\n    }\r\n    if (groundCoords.y < -.5) {\r\n        f = min(f, abs((-.5 - entryPoint.y) / (groundCoords.y - entryPoint.y)));\r\n    }\r\n    if (groundCoords.y > .5) {\r\n        f = min(f, abs((.5 - entryPoint.y) / (groundCoords.y - entryPoint.y)));\r\n    }\r\n\r\n    refracted *= f;*/\r\n\r\n    float opacity = uOpacity * entryPoint.z;//length(refracted);\r\n    opacity = clamp(opacity, 0.0, 1.0);\r\n\r\n    return mix(floorColor, WATER_COLOR, opacity);\r\n}\r\n\r\nvec3 getReflectedColor(const vec3 dir)\r\n{\r\n    return vec3(0.5, 0.5, 0.8);\r\n}\r\n\r\nvec4 getSpecular(const vec3 reflected)\r\n{\r\n    float f = max(0.0, dot(-uLightDir, reflected));\r\n    f = pow(f, 200.0);\r\n    f *= float(uSpecular);\r\n\r\n    return vec4(SPECULAR_COLOR, f);\r\n}\r\n\r\nvec3 computeColor(const vec3 pos, const vec3 fromEye, const vec3 normal)\r\n{\r\n    vec3 refracted = refract(fromEye, normal, uEta);\r\n    vec3 reflected = reflect(fromEye, normal);\r\n\r\n    vec3 refractedColor = getRefractedColor(pos, refracted);\r\n    vec3 reflectedColor = getReflectedColor(reflected);\r\n\r\n    float fresnelFactor = getFresnelFactor(fromEye, normal);\r\n\r\n    vec3 surfaceColor = mix(refractedColor, reflectedColor, fresnelFactor);\r\n    vec4 specularColor = getSpecular(reflected);\r\n\r\n    return mix(surfaceColor, specularColor.rgb, specularColor.a);\r\n}`;\r\n\r\nconst sidesVert: string =\r\n    `attribute vec3 aPosition; //in {-.5, +.5} x {-.5, +.5} x {+0, +1}\r\nattribute vec2 aNormal; //normalized in {-1, +1} x {-1, +1}\r\n\r\nuniform mat4 uMVPMatrix;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec2 vNormal;\r\nvarying float relativeHeight; //relative to amplitude, in [-1, +1]\r\n\r\nvoid main(void) {\r\n    float dH = uAmplitude / 2.0;\r\n\r\n    vPosition = aPosition;\r\n    vPosition.z *= uWaterLevel + dH;\r\n\r\n    vNormal = aNormal;\r\n\r\n    relativeHeight = (vPosition.z - uWaterLevel) / dH;\r\n    \r\n    gl_Position = uMVPMatrix * vec4(vPosition, 1.0);\r\n}`;\r\n\r\nconst sidesFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform sampler2D uWater;\r\n\r\nuniform vec3 uEyePos;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec2 vNormal;\r\nvarying float relativeHeight; //relative to amplitude, in [-1, +1]\r\n\r\n___ENCODE_DECODE___\r\n\r\n___WATER_COMMON___\r\n\r\n/* Returns true for every fragment above the water level */\r\nbool shouldSkip()\r\n{\r\n    float surface = decodeHeight(texture2D(uWater, vPosition.xy + .5));\r\n    return (relativeHeight > surface);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    /* Skip the fragments above water level */\r\n    if (shouldSkip()) {\r\n        discard;\r\n    }\r\n\r\n    vec3 fromEye = normalize(vPosition - uEyePos);\r\n    vec3 normal = vec3(vNormal, 0); //already normalized\r\n    \r\n    vec3 color = computeColor(vPosition, fromEye, normal);\r\n\r\n    gl_FragColor = vec4(color, 1);\r\n}`;\r\n\r\nconst surfaceVert: string =\r\n    `attribute vec2 aSampleCoords; //in [0,1] x [0,1]\r\n\r\nuniform mat4 uMVPMatrix;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\n\r\nuniform float uWaterLevel;\r\nuniform float uAmplitude;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    float height = decodeHeight(texture2D(uWater, aSampleCoords));\r\n\r\n    float dH = uAmplitude / 2.0;\r\n\r\n    vPosition.xy = aSampleCoords - .5;\r\n    vPosition.z = uWaterLevel + dH * height;\r\n    vPosition.z -= 0.001; //slight shift to avoid artifacts at surface-sides jointure\r\n\r\n    vNormal = decodeNormal(texture2D(uNormals, aSampleCoords), uAmplitude);\r\n    \r\n    gl_Position = uMVPMatrix * vec4(vPosition, 1.0);\r\n}`;\r\n\r\nconst surfaceFrag: string =\r\n    `precision mediump float;\r\n\r\nuniform vec3 uEyePos;\r\n\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\n___WATER_COMMON___\r\n\r\nvoid main(void)\r\n{\r\n    vec3 fromEye = normalize(vPosition - uEyePos);\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 color = computeColor(vPosition, fromEye, normal);\r\n\r\n    gl_FragColor = vec4(color, 1);\r\n}`;\r\n\r\nfunction buildSidesShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = sidesVert;\r\n    let fragSrc = sidesFrag.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n    fragSrc = fragSrc.replace(/___WATER_COMMON___/g, waterCommonStr);\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nfunction buildSurfaceShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = surfaceVert.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);\r\n    let fragSrc = surfaceFrag.replace(/___WATER_COMMON___/g, waterCommonStr);\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nexport {\r\n    buildSidesShader,\r\n    buildSurfaceShader,\r\n};","declare const mat4: any;\r\n\r\nclass OrbitalCamera {\r\n    private _focus: number[];\r\n    private _distance: number;\r\n    private _theta: number;\r\n    private _phi: number;\r\n\r\n    private _eyePos: number[];\r\n    private _viewMatrix: number[];\r\n\r\n    constructor(focusPoint: number[], distance: number) {\r\n        this._focus = focusPoint;\r\n        this._distance = distance;\r\n        this._theta = 0;\r\n        this._phi = 0.01;\r\n\r\n        this._eyePos = [0, 0, 0];\r\n        this._viewMatrix = mat4.create();\r\n        this.recompute();\r\n    }\r\n\r\n    public get focusPoint(): number[] {\r\n        return this._focus;\r\n    }\r\n\r\n    public get distance(): number {\r\n        return this._distance;\r\n    }\r\n\r\n    public get theta(): number {\r\n        return this._theta;\r\n    }\r\n\r\n    public get phi(): number {\r\n        return this._phi;\r\n    }\r\n\r\n    public set focusPoint(newFocus: number[]) {\r\n        this._focus = newFocus;\r\n        this.recompute();\r\n    }\r\n\r\n    public set distance(newDistance: number) {\r\n        this._distance = newDistance;\r\n        this.recompute();\r\n    }\r\n\r\n    public set theta(newTheta: number) {\r\n        this._theta = newTheta;\r\n        this.recompute();\r\n    }\r\n\r\n    public set phi(newPhi: number) {\r\n        this._phi = newPhi;\r\n        this.recompute();\r\n    }\r\n\r\n    public get eyePos(): number[] {\r\n        return this._eyePos;\r\n    }\r\n\r\n    public get viewMatrix(): number[] {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    private recompute(): void {\r\n        const sin = Math.sin;\r\n        const cos = Math.cos;\r\n\r\n        this._eyePos[0] = this.focusPoint[0] + this.distance * (sin(this.phi) * cos(this.theta));\r\n        this._eyePos[1] = this.focusPoint[1] + this.distance * (sin(this.phi) * sin(this.theta));\r\n        this._eyePos[2] = this.focusPoint[2] + this.distance * (cos(this.phi));\r\n\r\n        this._viewMatrix = mat4.lookAt(this._viewMatrix, this.eyePos, this.focusPoint, [0, 0, 1]);\r\n    }\r\n}\r\n\r\nexport default OrbitalCamera;","import GLResource from \"../gl-utils/gl-resource\";\r\nimport Caustics from \"./caustics\";\r\n\r\nclass ViewerCommon extends GLResource {\r\n    private _caustics: Caustics;\r\n\r\n    private _tileTexture: WebGLTexture;\r\n\r\n    constructor(gl: WebGLRenderingContext, causticsRes: number, tileTexPath: string) {\r\n        function isPowerOf2(n) {\r\n            if (typeof n !== 'number')\r\n                return 'Not a number';\r\n\r\n            return n && (n & (n - 1)) === 0;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        /* Create caustics */\r\n        this._caustics = new Caustics(gl, causticsRes, causticsRes);\r\n\r\n        /* Create tile texture. Default texture is blue 1x1 texture. */\r\n        this._tileTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this._tileTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\r\n\r\n        const tileImg = new Image();\r\n        const tileTexture = this._tileTexture;\r\n        tileImg.onload = function () {\r\n            gl.bindTexture(gl.TEXTURE_2D, tileTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tileImg);\r\n\r\n            if (isPowerOf2(tileImg.width) && isPowerOf2(tileImg.height)) {\r\n                gl.generateMipmap(gl.TEXTURE_2D);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            }\r\n        };\r\n        tileImg.src = tileTexPath;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._caustics.freeGLResources();\r\n        this._caustics = null;\r\n\r\n        gl.deleteTexture(this._tileTexture);\r\n        this._tileTexture = null;\r\n    }\r\n\r\n    get caustics(): Caustics {\r\n        return this._caustics;\r\n    }\r\n\r\n    get tileTexture(): WebGLTexture {\r\n        return this._tileTexture;\r\n    }\r\n}\r\n\r\nexport default ViewerCommon;","import GLResource from \"../gl-utils/gl-resource\";\r\nimport FBO from \"../gl-utils/fbo\";\r\nimport Water from \"../water\";\r\nimport Shader from \"../gl-utils/shader\";\r\nimport * as ShadersBuilder from \"./caustics-shaders\";\r\n\r\nclass Caustics extends GLResource {\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    private _supported: boolean;\r\n\r\n    private _gridWidth: number;\r\n    private _gridHeight: number;\r\n\r\n    private _shader: Shader;\r\n\r\n    private _texture: WebGLTexture;\r\n    private _fbo: FBO;\r\n\r\n    private _vertices: WebGLBuffer;\r\n    private _indices: WebGLBuffer;\r\n\r\n    constructor(gl: WebGLRenderingContext, w: number, h: number) {\r\n        super(gl);\r\n\r\n        this._supported = gl.getExtension('OES_standard_derivatives') !== null;\r\n\r\n        const n = 128;\r\n        this._gridWidth = n;\r\n        this._gridHeight = n;\r\n\r\n        this.reset(w, h);\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        const gl = super.gl(); //shortcut\r\n\r\n        if (this._shader) {\r\n            this._shader.freeGLResources();\r\n        }\r\n        if (this._texture) {\r\n            gl.deleteTexture(this._texture);\r\n        }\r\n        if (this._fbo) {\r\n            this._fbo.freeGLResources();\r\n        }\r\n\r\n        if (this._vertices) {\r\n            gl.deleteBuffer(this._vertices);\r\n        }\r\n        if (this._indices) {\r\n            gl.deleteBuffer(this._indices);\r\n        }\r\n    }\r\n\r\n    public compute(water: Water, amplitude: number, waterLevel: number, eta: number): void {\r\n        if (!this.supported)\r\n            return;\r\n\r\n        const gl = super.gl(); //shortcut\r\n        const shader = this._shader;\r\n\r\n        shader.u[\"uWater\"].value = water.heightmap;\r\n        shader.u[\"uNormals\"].value = water.normalmap;\r\n        shader.u[\"uAmplitude\"].value = 0.1 * amplitude;\r\n        shader.u[\"uWaterLevel\"].value = waterLevel;\r\n        shader.u[\"uEta\"].value = eta;\r\n\r\n        this._fbo.bind([this._texture]);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        shader.use();\r\n        shader.bindUniforms();//AndAttributes();\r\n\r\n        gl.enableVertexAttribArray(0);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._vertices);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indices);\r\n\r\n        const nbTriangles = 2 * (this._gridWidth - 1) * (this._gridHeight - 1);\r\n        gl.drawElements(gl.TRIANGLES, 3 * nbTriangles, gl.UNSIGNED_SHORT, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.disableVertexAttribArray(0);\r\n    }\r\n\r\n    public reset(w: number, h: number): void {\r\n        if (!this.supported)\r\n            return;\r\n\r\n        this.freeGLResources();\r\n\r\n        const gl = super.gl(); //shortcut\r\n\r\n        this._width = w;\r\n        this._height = h;\r\n\r\n        this._shader = ShadersBuilder.buildCausticsShader(gl);\r\n\r\n        this._fbo = new FBO(gl, w, h);\r\n\r\n        /* Texture initialization */\r\n        const data: number[] = new Array(3 * w * h);\r\n        for (let i = 0; i < data.length;  ++i) {\r\n            data[i] = 127;\r\n        }\r\n        const uintData = new Uint8Array(data);\r\n\r\n        const wrap = gl.CLAMP_TO_EDGE;\r\n        const filter = gl.LINEAR;\r\n        this._texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, w, h, 0,\r\n            gl.RGB, gl.UNSIGNED_BYTE, uintData);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n\r\n        /* Grid vertices */\r\n        {\r\n            const nX = this._gridWidth;\r\n            const nY = this._gridHeight;\r\n            {\r\n                const vert = [];\r\n                for (let iY = 0; iY < nY; ++iY) {\r\n                    for (let iX = 0; iX < nX; ++iX) {\r\n                        vert.push(iX / (nX - 1));\r\n                        vert.push(iY / (nY - 1));\r\n                    }\r\n                }\r\n                const array = new Float32Array(vert);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n                this._vertices = id;\r\n            }\r\n            {\r\n                const indices = [];\r\n                for (let iY = 0; iY < nY - 1; ++iY) {\r\n                    for (let iX = 0; iX < nX - 1; ++iX) {\r\n                        indices.push(iY * nX + iX);\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n\r\n                        indices.push(iY * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX + 1);\r\n                        indices.push((iY + 1) * nX + iX);\r\n                    }\r\n                }\r\n\r\n                const array = new Uint16Array(indices);\r\n\r\n                const id = gl.createBuffer();\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, id);\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n                this._indices = id;\r\n            }\r\n        }\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    get texture(): WebGLTexture {\r\n        return this._texture;\r\n    }\r\n\r\n    get supported(): boolean {\r\n        return this._supported;\r\n    }\r\n}\r\n\r\nexport default Caustics;","import Shader from \"../gl-utils/shader\";\r\nimport VBO from \"../gl-utils/vbo\";\r\nimport { encodeDecodeStr } from \"../water-shaders\";\r\n\r\nconst causticsVert: string =\r\n    `attribute vec2 aVert;\r\n\r\nuniform sampler2D uWater;\r\nuniform sampler2D uNormals;\r\n\r\nuniform float uAmplitude;\r\nuniform float uWaterLevel;\r\nuniform float uEta;\r\n\r\nvarying vec2 sourceCoords;\r\nvarying vec2 refractedCoords;\r\n\r\n___ENCODE_DECODE___\r\n\r\nvoid main(void) {\r\n    float height = decodeHeight(texture2D(uWater, aVert));\r\n    height = uWaterLevel + 0.5 * uAmplitude * height;\r\n    vec3 normal = decodeNormal(texture2D(uNormals, aVert), uAmplitude);\r\n\r\n    const vec3 fromLight = vec3(0, 0, -1);\r\n    vec3 refracted = refract(fromLight, normal, uEta);\r\n    vec3 toGround = height * refracted / refracted.z;\r\n\r\n    vec2 groundCoords = aVert + toGround.xy;\r\n\r\n    sourceCoords = aVert;\r\n    refractedCoords = groundCoords;\r\n\r\n    gl_Position = vec4(2.0*groundCoords - 1.0, 0.0, 1.0);\r\n}`;\r\n\r\nconst causticsFrag: string =\r\n    `#extension GL_OES_standard_derivatives : enable\r\nprecision mediump float;\r\n\r\nvarying vec2 sourceCoords;\r\nvarying vec2 refractedCoords;\r\n\r\nvoid main(void)\r\n{\r\n    float sourceArea = length(dFdx(sourceCoords)) * length(dFdy(sourceCoords));\r\n    float refractedArea = length(dFdx(refractedCoords)) * length(dFdy(refractedCoords));\r\n\r\n    float variation = sourceArea / refractedArea;\r\n\r\n    gl_FragColor = 0.5 + .9 * vec4(variation - 1.0);\r\n}`;\r\n\r\nfunction buildCausticsShader(gl: WebGLRenderingContext): Shader {\r\n    const vertSrc = causticsVert.replace(/___ENCODE_DECODE___/g, encodeDecodeStr);;\r\n    const fragSrc = causticsFrag;\r\n\r\n    return new Shader(gl, vertSrc, fragSrc);\r\n}\r\n\r\nexport {\r\n    buildCausticsShader,\r\n};","import Water from \"./water\";\r\nimport Viewer2D from \"./viewer/viewer2D\";\r\nimport Viewer3D from \"./viewer/viewer3D\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction bindControls(water: Water, viewer2D: Viewer2D, viewer3D: Viewer3D): void {\r\n    {\r\n        const RESOLUTION_CONTROL_ID = \"quality\";\r\n        const setResolution = (resolution: string[]) => {\r\n            const size = +resolution[0];\r\n            water.reset(size, size);\r\n        }\r\n        Page.Tabs.addObserver(RESOLUTION_CONTROL_ID, setResolution);\r\n        setResolution(Page.Tabs.getValues(RESOLUTION_CONTROL_ID));\r\n    }\r\n    {\r\n        const RAIN_CONTROL_ID = \"rain-checkbox-id\";\r\n        const updateRain = (enable: boolean) => { water.rain = enable; };\r\n        Page.Checkbox.addObserver(RAIN_CONTROL_ID, updateRain);\r\n        updateRain(Page.Checkbox.isChecked(RAIN_CONTROL_ID));\r\n    }\r\n    {\r\n        const TENSION_CONTROL_ID = \"surface-tension-range-id\";\r\n        const updateTension = (tension: number) => { water.surfaceTension = tension; };\r\n        Page.Range.addObserver(TENSION_CONTROL_ID, updateTension);\r\n        updateTension(Page.Range.getValue(TENSION_CONTROL_ID));\r\n    }\r\n    {\r\n        const SPRING_CONTROL_ID = \"stiffness-range-id\";\r\n        const updateSpring = (stiffness: number) => { water.springStiffness = stiffness; };\r\n        Page.Range.addObserver(SPRING_CONTROL_ID, updateSpring);\r\n        updateSpring(Page.Range.getValue(SPRING_CONTROL_ID));\r\n    }\r\n    {\r\n        const DISPERSION_CONTROL_ID = \"dispersion-range-id\";\r\n        const updateDispersion = (dispersion: number) => { water.dispersion = dispersion; };\r\n        Page.Range.addObserver(DISPERSION_CONTROL_ID, updateDispersion);\r\n        updateDispersion(Page.Range.getValue(DISPERSION_CONTROL_ID));\r\n    }\r\n\r\n    {\r\n        const SPECULAR_CONTROL_ID = \"specular-checkbox-id\";\r\n        const updateSpecular = (enable: boolean) => {\r\n            viewer2D.specular = enable;\r\n            viewer3D.specular = enable;\r\n        };\r\n        Page.Checkbox.addObserver(SPECULAR_CONTROL_ID, updateSpecular);\r\n        updateSpecular(Page.Checkbox.isChecked(SPECULAR_CONTROL_ID));\r\n    }\r\n    {\r\n        const CAUSTICS_CONTROL_ID = \"caustics-checkbox-id\";\r\n        const updateCaustics = (enable: boolean) => {\r\n            viewer2D.caustics = enable;\r\n            viewer3D.caustics = enable;\r\n        };\r\n        Page.Checkbox.addObserver(CAUSTICS_CONTROL_ID, updateCaustics);\r\n        updateCaustics(Page.Checkbox.isChecked(CAUSTICS_CONTROL_ID));\r\n    }\r\n    {\r\n        const FRESNEL_CONTROL_ID = \"fresnel-checkbox-id\";\r\n        const updateSpecular = (enable: boolean) => {\r\n            viewer2D.fresnel = enable;\r\n            viewer3D.fresnel = enable;\r\n        };\r\n        Page.Checkbox.addObserver(FRESNEL_CONTROL_ID, updateSpecular);\r\n        updateSpecular(Page.Checkbox.isChecked(FRESNEL_CONTROL_ID));\r\n    }\r\n    {\r\n        const AMPLITUDE_CONTROL_ID = \"amplitude-range-id\";\r\n        const updateAmplitude = (amplitude: number) => {\r\n            viewer2D.amplitude = amplitude;\r\n            viewer3D.amplitude = amplitude;\r\n        };\r\n        Page.Range.addObserver(AMPLITUDE_CONTROL_ID, updateAmplitude);\r\n        updateAmplitude(Page.Range.getValue(AMPLITUDE_CONTROL_ID));\r\n    }\r\n    {\r\n        const LEVEL_CONTROL_ID = \"level-range-id\";\r\n        const updateWaterLevel = (level: number) => {\r\n            viewer2D.waterLevel = level;\r\n            viewer3D.waterLevel = level;\r\n        };\r\n        Page.Range.addObserver(LEVEL_CONTROL_ID, updateWaterLevel);\r\n        updateWaterLevel(Page.Range.getValue(LEVEL_CONTROL_ID));\r\n    }\r\n    {\r\n        const OPACITY_CONTROL_ID = \"opacity-range-id\";\r\n        const updateOpacity = (opacity: number) => {\r\n            viewer2D.opacity = opacity;\r\n            viewer3D.opacity = opacity;\r\n        };\r\n        Page.Range.addObserver(OPACITY_CONTROL_ID, updateOpacity);\r\n        updateOpacity(Page.Range.getValue(OPACITY_CONTROL_ID));\r\n    }\r\n    {\r\n        const ETA_CONTROL_ID = \"refraction-range-id\";\r\n        const updateEta = (eta: number) => {\r\n            viewer2D.eta = eta;\r\n            viewer3D.eta = eta;\r\n        };\r\n        Page.Range.addObserver(ETA_CONTROL_ID, updateEta);\r\n        updateEta(Page.Range.getValue(ETA_CONTROL_ID));\r\n    }\r\n}\r\n\r\nfunction bind(water: Water, viewer2D: Viewer2D, viewer3D: Viewer3D): void {\r\n    bindControls(water, viewer2D, viewer3D);\r\n}\r\n\r\nfunction bindRendererChooser(choose2D: () => void, choose3D: () => void) {\r\n    function bindViewer(viewerStr: string[]) {\r\n        if (viewerStr[0] === \"2D\") {\r\n            choose2D();\r\n        } else {\r\n            choose3D();\r\n        }\r\n    }\r\n    const VIEWER_CONTROL_ID = \"viewer\";\r\n    Page.Tabs.addObserver(VIEWER_CONTROL_ID, bindViewer);\r\n    bindViewer(Page.Tabs.getValues(VIEWER_CONTROL_ID));\r\n}\r\n\r\nexport { bind, bindRendererChooser };"],"sourceRoot":""}